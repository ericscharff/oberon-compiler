(*
 * This file is part of oberon-compiler
 *
 * Copyright (C) 2018-2025  Eric Scharff
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *)

MODULE Compiler;

(*
  Main module for the compiler.

  Usage:
   oberon [-bounds] [-cpp] [FileName.ob]

  If no FileName is given, the compiler doesn't compile anything and runs
  its built-in self tests. Otherwise, it compiles the main module in
  FileName.ob and outputs out.c.

  Flags:
    -bounds     - Emit bounds checks on array references.
    -cpp        - Emit C++ code. This is used to support type guards. While
                  strictly speaking not necessary, the code generator uses
                  RTTI to implement typeguard (x IS SomeClass). If C++
                  features are not used in code, then this flag is unnecessary.
                  In C++ mode, the syntax matches C++ (e.g., type extensions
                  emit C++ subclasses.
    -use_int64  - If set, replace int references with int64_t
    -use_double - If set, replace float references with double
*)

IMPORT Args, AST, CCodegen, Decls, Lex, Parse;

PROCEDURE RunTests;
BEGIN
  Lex.RunTests;
  Decls.RunTests;
  Parse.RunTests;
END RunTests;

PROCEDURE CompileFile;
VAR
  fileName: ARRAY 256 OF CHAR;
  l:        Lex.Lexer;
  p:        Decls.ReachableDecl;
  i:        INTEGER;
  gotFile:  BOOLEAN;
BEGIN
  (* Parse command line args *)
  i := 1;
  gotFile := FALSE;
  REPEAT
    Args.GetArg(fileName, i);
    IF fileName = "-bounds" THEN
      CCodegen.EnableBoundsChecks;
    ELSIF fileName = "-cpp" THEN
      CCodegen.EnableCPlusPlus;
    ELSIF fileName = "-use_double" THEN
      CCodegen.EnableDouble
    ELSIF fileName = "-use_int64" THEN
      CCodegen.EnableInt64
    ELSE
      gotFile := TRUE;
    END;
    INC(i);
  UNTIL gotFile;
  Parse.InitFromFile(fileName);
  Parse.ParseModule;
  l := Parse.l;

  Decls.VisitDecl(Parse.lastModuleDecls);
  p := Decls.reachableDecls;
  CCodegen.GenTypeinfos();
  WHILE p # NIL DO
    IF (p.d.kind = AST.declType) & (p.d.typ.kind = AST.typePointer) THEN
      CCodegen.Generate(l, p.d);
    END;
    p := p.next;
  END;
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF (p.d.kind = AST.declType) & (p.d.typ.kind # AST.typePointer) THEN
      CCodegen.Generate(l, p.d);
    END;
    p := p.next;
  END;
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF p.d.kind = AST.declVar THEN
      CCodegen.Generate(l, p.d);
    END;
    p := p.next;
  END;
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF (p.d.kind = AST.declProcedure) & ~p.d.isNative THEN
      CCodegen.Generate(l, p.d);
    END;
    p := p.next;
  END;
  CCodegen.GenStartMain();
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF p.d.qname.name = Decls.modInitName THEN
      CCodegen.GenCall(l, p.d.qname);
    END;
    p := p.next;
  END;
  CCodegen.GenEndMain();
END CompileFile;

BEGIN
  IF Args.Count() = 1 THEN
    RunTests
  ELSE
    CompileFile
  END
END Compiler.
