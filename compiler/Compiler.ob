MODULE Compiler;

(*
  Main module for the compiler.

  Usage:
   oberon [-bounds] [-cpp] [FileName.ob]

  If no FileName is given, the compiler doesn't compile anything and runs
  its built-in self tests. Otherwise, it compiles the main module in
  FileName.ob and outputs out.c.

  Flags:
    -bounds - Emit bounds checks on array references.
    -cpp    - Emit C++ code. This is used to support type guards. While
              strictly speaking not necessary, the code generator uses
              RTTI to implement typeguard (x IS SomeClass). If C++
              features are not used in code, then this flag is unnecessary.
              In C++ mode, the syntax matches C++ (e.g., type extensions
              emit C++ subclasses.
*)

IMPORT Args, AST, CCodegen, Decls, Lex, Parse;

PROCEDURE RunTests;
BEGIN
  Lex.RunTests;
  Decls.RunTests;
  Parse.RunTests;
END RunTests;

PROCEDURE CompileFile;
VAR
  fileName :ARRAY 256 OF CHAR;
  l        :Lex.Lexer;
  p        :Decls.ReachableDecl;
  i        :INTEGER;
  gotFile  :BOOLEAN;
BEGIN
  (* Parse command line args *)
  i := 1;
  gotFile := FALSE;
  REPEAT
    Args.GetArg(fileName, i);
    IF fileName = "-bounds" THEN
      CCodegen.EnableBoundsChecks;
    ELSIF fileName = "-cpp" THEN
      CCodegen.EnableCPlusPlus;
    ELSE
      gotFile := TRUE;
    END;
    INC(i);
  UNTIL gotFile;
  Parse.InitFromFile(fileName);
  Parse.ParseModule;
  l := Parse.l;

  Decls.VisitDecl(Parse.lastModuleDecls);
  p := Decls.reachableDecls;
  CCodegen.GenTypeinfos();
  WHILE p # NIL DO
    IF (p.d.kind = AST.declType) & (p.d.typ.kind = AST.typePointer) THEN
      CCodegen.Generate(l, p.d);
    END;
    p := p.next;
  END;
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF (p.d.kind = AST.declType) & (p.d.typ.kind # AST.typePointer) THEN
      CCodegen.Generate(l, p.d);
    END;
    p := p.next;
  END;
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF p.d.kind = AST.declVar THEN
      CCodegen.Generate(l, p.d);
    END;
    p := p.next;
  END;
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF (p.d.kind = AST.declProcedure) & ~p.d.isNative THEN
      CCodegen.Generate(l, p.d);
    END;
    p := p.next;
  END;
  CCodegen.GenStartMain();
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF p.d.qname.name = Decls.modInitName THEN
      CCodegen.GenCall(l, p.d.qname);
    END;
    p := p.next;
  END;
  CCodegen.GenEndMain();
END CompileFile;

BEGIN
  IF Args.Count() = 1 THEN
    RunTests
  ELSE
    CompileFile
  END
END Compiler.
