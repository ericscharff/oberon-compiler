(*
 * This file is part of oberon-compiler
 *
 * Copyright (C) 2018-2023  Eric Scharff
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *)

MODULE CCodegen;

IMPORT AST, Lex, Out;

VAR
  indent:          INTEGER;
  innerProcCount:  INTEGER;
  addBoundsChecks: BOOLEAN;
  genCPlusPlus:    BOOLEAN;
  GenExpr:         PROCEDURE (l: Lex.Lexer; e: AST.Expr);

PROCEDURE GenStr(s: ARRAY OF CHAR);
BEGIN
  Out.Str(s);
END GenStr;

PROCEDURE GenInt(i: INTEGER);
BEGIN
  Out.Int(i);
END GenInt;

PROCEDURE GenReal(r: REAL);
BEGIN
  Out.Real(r);
END GenReal;

PROCEDURE GenLn;
BEGIN
  Out.Ln
END GenLn;

PROCEDURE GenI;
VAR
  i: INTEGER;
BEGIN
  FOR i := 1 TO indent DO GenStr("  ") END
END GenI;

PROCEDURE GenTypeinfoEntry(tid, count: INTEGER): INTEGER;
BEGIN
  IF AST.recordToParent[tid] # 0 THEN
    count := GenTypeinfoEntry(AST.recordToParent[tid], count + 1);
    GenInt(AST.recordToParent[tid]); GenStr(", ");
  END
  RETURN count
END GenTypeinfoEntry;

PROCEDURE GenTypeinfos*;
VAR
  i, c: INTEGER;
BEGIN
  GenStr("/* Automatically generated code, do not edit! */"); GenLn;
  GenStr("typedef int oberon_typeid;"); GenLn; (* No longer used *)
  GenStr("oberon_typeid oberon_typeinfos[1];"); GenLn; (* No longer used *)
  GenStr("typedef struct oberon_typedesc { int parent[6]; } oberon_typedesc;");
  GenLn;
  GenStr("oberon_typedesc oberon_typedescs[] = {"); GenLn;
  INC(indent);
  FOR i := 0 TO AST.nextTypeId DO
    GenI; GenStr("{ {");
    c := GenTypeinfoEntry(i, 0);
    GenInt(i);
    GenStr(", ");
    WHILE c < 5 DO
      GenStr("-1, ");
      INC(c)
    END;
    GenStr("} },");
    GenLn;
  END;
  DEC(indent);
  GenStr("};"); GenLn;
  GenStr("#include "); GenStr(22X); GenStr("runtime.c"); GenStr(22X); GenLn;
END GenTypeinfos;

PROCEDURE GenQName(l: Lex.Lexer; name: AST.QName);
BEGIN
  IF name.moduleName > 0 THEN
    Lex.OutStr(l, name.moduleName);
    GenStr("_");
  END;
  IF name.name > 0 THEN
    Lex.OutStr(l, name.name);
  END;
END GenQName;

PROCEDURE GenType(l: Lex.Lexer; t: AST.Type; name: AST.QName; skipDecl, procDecl: BOOLEAN);
VAR
  f: AST.Decl;
  q: AST.QName;
  p: AST.Type;
BEGIN
  q.moduleName := 0;
  q.name := 0;
  IF (t.decl = NIL) OR skipDecl THEN
    CASE t.kind OF
      AST.typeInteger:
        GenStr("int ");
        GenQName(l, name);
    | AST.typeReal:
        GenStr("OBERON_REAL ");
        GenQName(l, name);
    | AST.typeBoolean:
        GenStr("bool ");
        GenQName(l, name);
    | AST.typeChar:
        GenStr("char ");
        GenQName(l, name);
    | AST.typeSet:
        GenStr("int ");
        GenQName(l, name);
    | AST.typePointer:
        IF t.base.decl = NIL THEN
          GenType(l, t.base, q, FALSE, FALSE);
        ELSE
          GenStr("struct ");
          GenQName(l, t.base.decl.qname);
        END;
        GenStr(" *");
        GenQName(l, name);
    | AST.typeArray:
        p := t;
        WHILE p.kind = AST.typeArray DO
          p := p.base;
        END;
        GenType(l, p, name, FALSE, FALSE);
        p := t;
        WHILE (p.kind = AST.typeArray) DO
          GenStr("[");
          GenInt(p.length);
          GenStr("]");
          p := p.base;
        END;
    | AST.typeBuffer:
        GenStr("struct {"); GenLn;
        INC(indent);
        GenI;
        GenType(l, t.base, q, FALSE, FALSE);
        GenStr(" *buf; INTEGER cap; INTEGER len;");
        GenLn;
        DEC(indent);
        GenI; GenStr("} ");
        GenQName(l, name);
    | AST.typeRecord:
        GenStr("struct ");
        GenQName(l, name);
        IF t.base = NIL THEN
          GenStr(" {");
          GenLn;
          INC(indent);
          IF genCPlusPlus THEN
            GenI;
            GenStr("virtual ~");
            GenQName(l, name);
            GenStr("() {}");
            GenLn;
          END;
        ELSE
          ASSERT(t.base.decl # NIL);
          IF genCPlusPlus THEN
            GenStr(": public ");
            GenQName(l, t.base.decl.qname);
            GenStr(" {");
            GenLn;
            INC(indent)
          ELSE
            GenStr(" {");
            GenLn;
            INC(indent);
            GenI;
            GenQName(l, t.base.decl.qname);
            GenStr(" _base;");
            GenLn
          END
        END;
        f := t.fields;
        IF ((f = NIL) OR (f.kind = AST.declEND)) & ~genCPlusPlus THEN
          (* The code is attempting to make an empty struct. This is *)
          (* legitimate Oberon code but questionable C code because  *)
          (* the size of the struct is unclear. To avoid the         *)
          (* ambiguity, simply put a dummy field in the struct. This *)
          (* is not necessary in C++.                                *)
          GenI;
          GenStr("int __dummy;");
          GenLn
        END;
        WHILE (f # NIL) & (f.kind # AST.declEND) DO
          IF f.nesting = 0 THEN
            (* Drop package from field name *)
            q.name := f.qname.name;
            GenI;
            IF f.isNative THEN
              (* Special opaque native type - RecordName_Native *)
              GenQName(l, t.decl.qname);
              GenStr("_Native ");
              GenQName(l, q);
            ELSE
              GenType(l, f.typ, q, FALSE, FALSE);
            END;
            GenStr(";");
            GenLn;
          END;
          f := f.next;
        END;
        DEC(indent);
        GenI; GenStr("} "); GenQName(l, name);
    | AST.typeProcedure:
        IF t.base.kind = AST.typeNil THEN
          GenStr("void ")
        ELSE
          GenType(l, t.base, q, FALSE, FALSE);
        END;
        IF procDecl THEN
          GenQName(l, name);
        ELSE
          GenStr(" (*");
          GenQName(l, name);
          GenStr(")");
        END;
        GenStr("(");
        IF (t.fields = NIL) THEN
          IF ~genCPlusPlus THEN GenStr("void") END;
        ELSE
          f := t.fields;
          WHILE f.kind # AST.declEND DO
            t := f.typ;
            IF procDecl THEN
              q.name := f.qname.name;
            END;
            IF (t.kind IN {AST.typeRecord, AST.typeArray}) &
               (f.kind # AST.declVarParam) THEN
              GenStr("const ");
            END;
            IF (t.kind = AST.typeRecord) OR
               ((f.kind = AST.declVarParam) & ~(t.kind = AST.typeArray)) THEN
              q.name := 0;
              GenType(l, t, q, FALSE, FALSE);
              GenStr(" *");
              IF procDecl THEN
                q.name := f.qname.name;
                GenQName(l, q);
              END;
              IF AST.NeedsTypeInfo(t) & (t.kind = AST.typeRecord) THEN
                GenStr(", oberon_typeid ");
                IF procDecl THEN
                  q.name := f.qname.name;
                  GenQName(l, q);
                  GenStr("__typeid");
                END;
              END;
            ELSIF AST.IsOpenArray(t) THEN
              q.name := 0;
              GenType(l, t.base, q, FALSE, FALSE);
              GenStr(" *");
              IF procDecl THEN
                q.name := f.qname.name;
                GenQName(l, q);
              END;
            ELSE
              GenType(l, t, q, FALSE, FALSE);
            END;
            IF AST.IsOpenArray(t) THEN
              GenStr(", INTEGER");
              IF procDecl THEN
                GenStr(" ");
                GenQName(l, q);
                GenStr("__len");
              END;
            END;
            IF f.next.kind # AST.declEND THEN
              GenStr(", ");
            END;
            f := f.next;
          END;
        END;
        GenStr(")");
    END;
  ELSE
    GenQName(l, t.decl.qname);
    GenStr(" ");
    GenQName(l, name);
  END;
END GenType;

PROCEDURE GenChar(i: INTEGER);
VAR
  c2: ARRAY 2 OF CHAR;
BEGIN
  (* apostrophe, backslash, or non-printable *)
  IF (i = 39) OR (i = 92) OR (i < 32) OR (i > 126) THEN
    GenInt(i);
  ELSE
    c2[1] := 0X;
    c2[0] := CHR(i);
    GenStr("'");
    GenStr(c2);
    GenStr("'");
  END;
END GenChar;

PROCEDURE GenVal(l: Lex.Lexer; e: AST.Expr);
BEGIN
  ASSERT(e.typ # NIL);
  IF e.typ.kind = AST.typeNil THEN
    GenStr("0 /*NULL*/");
  ELSIF e.typ.kind IN {AST.typeInteger, AST.typeBoolean} THEN
    GenInt(e.iVal);
  ELSIF e.typ.kind = AST.typeChar THEN
    GenChar(e.iVal);
  ELSIF e.typ.kind = AST.typeSet THEN
    GenInt(ORD(e.setVal));
  ELSIF e.typ.kind = AST.typeReal THEN
    GenReal(e.rVal);
  ELSIF e.typ.kind = AST.typeString THEN
    Lex.OutStrEscaped(l, e.iVal);
  ELSE
    ASSERT(FALSE);
  END;
END GenVal;

PROCEDURE GenLengthof(l: Lex.Lexer; e: AST.Expr);
VAR
  q: AST.QName;
BEGIN
  q.moduleName := 0;
  IF e.typ.kind = AST.typeString THEN
    GenInt(Lex.StringLenI(l, e.iVal) + 1);
  ELSIF e.typ.length > 0 THEN
    GenInt(e.typ.length);
  ELSIF e.typ.kind = AST.typeBuffer THEN
    GenExpr(l, e);
    GenStr(".len");
  ELSE
    ASSERT(e.kind = AST.exprIdentRef);
    q.name := e.decl.qname.name;
    GenQName(l, q);
    GenStr("__len");
  END;
END GenLengthof;

PROCEDURE GenTypeId(l: Lex.Lexer; e: AST.Expr);
VAR
  q: AST.QName;
BEGIN
  IF e.decl.kind = AST.declVar THEN
    GenInt(e.typ.typeId);
    (* Statically allocated records have a type id *)
  ELSE
    ASSERT((e.decl.kind = AST.declVarParam) OR (e.decl.kind = AST.declParam));
    (* Parameters already have a __typeid parameter that came along with them *)
    q.moduleName := 0;
    q.name := e.decl.qname.name;
    GenQName(l, q);
    GenStr("__typeid");
  END;
END GenTypeId;

PROCEDURE GenUnaryExpr(l: Lex.Lexer; e: AST.Expr);
BEGIN
  IF e.lhs.typ.kind = AST.typeSet THEN
    (* Set ops *)
    IF e.op = Lex.tMINUS THEN
      GenStr("~"); GenExpr(l, e.lhs);
    ELSE
      ASSERT(FALSE);
    END;
  ELSE
    (* Base types *)
    CASE e.op OF
      Lex.tMINUS: GenStr("-("); GenExpr(l, e.lhs); GenStr(")");
    | Lex.tPLUS: GenExpr(l, e.lhs);
    | Lex.tTILDE: GenStr("!("); GenExpr(l, e.lhs); GenStr(")");
    | Lex.tAsSetElt: GenStr("(1 << "); GenExpr(l, e.lhs); GenStr(")");
    END;
  END;
END GenUnaryExpr;

PROCEDURE GenTypeTest(l: Lex.Lexer; base: AST.Expr; t: AST.Type);
VAR
  q: AST.QName;
BEGIN
  IF base.typ.kind = AST.typePointer THEN
    GenExpr(l, base);
    IF base.typ.base.typeId = t.base.typeId THEN
      GenStr(" && 1");
    ELSE
      GenStr(" && oberon_typedescs[*(((oberon_typeid*)");
      GenExpr(l, base);
      GenStr(")-1)].parent[");
      GenInt(t.base.nesting);
      GenStr("] == ");
      GenInt(t.base.typeId);
    END;
  ELSE
    ASSERT(base.typ.kind = AST.typeRecord);
    ASSERT(t.kind = AST.typeRecord);
    ASSERT((base.decl.kind = AST.declVarParam) OR (base.decl.kind = AST.declParam));
    q.moduleName := 0;
    q.name := base.decl.qname.name;
    GenQName(l, q);
    IF base.typ.typeId = t.typeId THEN
      GenStr(" && 1");
    ELSE
      GenStr(" && oberon_typedescs[");
      GenTypeId(l, base);
      GenStr("].parent[");
      GenInt(t.nesting);
      GenStr("] == ");
      GenInt(t.typeId);
    END;
  END;
END GenTypeTest;

PROCEDURE GenBinaryExpr(l: Lex.Lexer; e: AST.Expr);
BEGIN
  GenStr("(");
  IF AST.IsStringType(e.lhs.typ) THEN
    ASSERT(AST.IsStringType(e.rhs.typ));
    (* String ops *)
    GenStr("strcmp(");
    GenExpr(l, e.lhs);
    GenStr(", ");
    GenExpr(l, e.rhs);
    GenStr(")");
    CASE e.op OF
      Lex.tLT: GenStr(" < 0");
    | Lex.tGT: GenStr(" > 0");
    | Lex.tLTEQ: GenStr(" <= 0");
    | Lex.tGTEQ: GenStr(" >= 0");
    | Lex.tEQ: GenStr(" == 0");
    | Lex.tPOUND: GenStr(" != 0");
    | Lex.tPLUS, Lex.tMINUS, Lex.tSTAR, Lex.tSLASH, Lex.tDIV, Lex.tMOD,
Lex.tBITAND, Lex.tBITOR, Lex.tBITXOR, Lex.tAMP, Lex.tOR, Lex.tIN,
Lex.tIS, Lex.tDOTDOT:
    END;
  ELSIF e.lhs.typ.kind = AST.typeSet THEN
    (* Set ops *)
    CASE e.op OF
      Lex.tPLUS:
        GenExpr(l, e.lhs); GenStr(" | "); GenExpr(l, e.rhs);
    | Lex.tMINUS:
        GenExpr(l, e.lhs); GenStr(" & ~"); GenExpr(l, e.rhs);
    | Lex.tSTAR:
        GenExpr(l, e.lhs); GenStr(" & "); GenExpr(l, e.rhs);
    | Lex.tSLASH, Lex.tDIV:
        GenExpr(l, e.lhs); GenStr(" ^ "); GenExpr(l, e.rhs);
    | Lex.tEQ:
        GenExpr(l, e.lhs); GenStr(" == "); GenExpr(l, e.rhs);
    | Lex.tPOUND:
        GenExpr(l, e.lhs); GenStr(" != "); GenExpr(l, e.rhs);
    | Lex.tMOD, Lex.tBITAND, Lex.tBITOR, Lex.tBITXOR, Lex.tAMP, Lex.tOR,
Lex.tLT, Lex.tGT, Lex.tLTEQ, Lex.tGTEQ, Lex.tIN, Lex.tIS, Lex.tDOTDOT:
        ASSERT(FALSE);
    END;
  ELSE
    (* Primitive type (CHAR, INTEGER, REAL, POINTER ops.                *)
    (* Of course, some of these don't make sense (e.g., pointer         *)
    (* + pointer) but this code relies on the fact that the AST has     *)
    (* done type checking and validation beforehand.                    *)
    CASE e.op OF
      Lex.tPLUS:
        GenExpr(l, e.lhs); GenStr(" + "); GenExpr(l, e.rhs);
    | Lex.tMINUS:
        GenExpr(l, e.lhs); GenStr(" - "); GenExpr(l, e.rhs);
    | Lex.tSTAR:
        GenExpr(l, e.lhs); GenStr(" * "); GenExpr(l, e.rhs);
    | Lex.tSLASH, Lex.tDIV:
        GenExpr(l, e.lhs); GenStr(" / "); GenExpr(l, e.rhs);
    | Lex.tMOD:
        GenExpr(l, e.lhs); GenStr(" % "); GenExpr(l, e.rhs);
    | Lex.tBITAND:
        GenExpr(l, e.lhs); GenStr(" & "); GenExpr(l, e.rhs);
    | Lex.tBITOR:
        GenExpr(l, e.lhs); GenStr(" | "); GenExpr(l, e.rhs);
    | Lex.tBITXOR:
        GenExpr(l, e.lhs); GenStr(" ^ "); GenExpr(l, e.rhs);
    | Lex.tAMP:
        GenExpr(l, e.lhs); GenStr(" && "); GenExpr(l, e.rhs);
    | Lex.tOR:
        GenExpr(l, e.lhs); GenStr(" || "); GenExpr(l, e.rhs);
    | Lex.tLT:
        GenExpr(l, e.lhs); GenStr(" < "); GenExpr(l, e.rhs);
    | Lex.tGT:
        GenExpr(l, e.lhs); GenStr(" > "); GenExpr(l, e.rhs);
    | Lex.tLTEQ:
        GenExpr(l, e.lhs); GenStr(" <= "); GenExpr(l, e.rhs);
    | Lex.tGTEQ:
        GenExpr(l, e.lhs); GenStr(" >= "); GenExpr(l, e.rhs);
    | Lex.tEQ:
        GenExpr(l, e.lhs); GenStr(" == "); GenExpr(l, e.rhs);
    | Lex.tPOUND:
        GenExpr(l, e.lhs); GenStr(" != "); GenExpr(l, e.rhs);
    | Lex.tIN:
        GenStr("(1 << ");
        GenExpr(l, e.lhs);
        GenStr(") & ");
        GenExpr(l, e.rhs);
    | Lex.tIS:
        GenTypeTest(l, e.lhs, e.rhs.typ);
    | Lex.tDOTDOT:
        GenStr("make_set_range(");
        GenExpr(l, e.lhs); GenStr(", "); GenExpr(l, e.rhs);
        GenStr(")");
    END;
  END;
  GenStr(")");
END GenBinaryExpr;

PROCEDURE GenIdentRefExpr(l: Lex.Lexer; e: AST.Expr);
VAR
  q: AST.QName;
BEGIN
  ASSERT(e.kind = AST.exprIdentRef);
  IF (e.decl.kind = AST.declProcedure) OR
     ((e.decl.kind = AST.declVar) & (e.decl.nesting = 0)) THEN
    q.moduleName := e.decl.qname.moduleName;
  ELSE
    (* Local variables don't get a prefix, just for readability *)
    q.moduleName := 0;
  END;
  q.name := e.decl.qname.name;
  IF ((e.decl.kind = AST.declVarParam) & ~(e.typ.kind = AST.typeArray)) OR
     ((e.decl.kind = AST.declParam) & (e.typ.kind = AST.typeRecord)) THEN
    GenStr("(*");
    GenQName(l, q);
    GenStr(")");
  ELSE
    GenQName(l, q);
  END;
END GenIdentRefExpr;

PROCEDURE GenProcCallExpr(l: Lex.Lexer; e: AST.Expr);
VAR
  formal: AST.Decl;
BEGIN
  GenExpr(l, e.lhs);
  GenStr("(");
  formal := e.lhs.typ.fields;
  e := e.rhs;
  WHILE e # NIL DO
    IF e.typ.kind = AST.typeArray THEN
      (* Arrays are always passed by pointer, no special processing  *)
      GenExpr(l, e);
    ELSIF (e.typ.kind = AST.typeRecord) OR
          (formal.kind = AST.declVarParam) THEN
      (* Record (and VAR parameters) are always passed by reference *)
      IF (e.typ # formal.typ) & ~genCPlusPlus THEN
        (* The formal parameter extends the actual parameter, so it is safe *)
        (* to cast the actual to the formal parameter, since the first      *)
        (* field of the actual parameter is the structure expected by the   *)
        (* formal parameter. This cast is not strictly necessary, but       *)
        (* avoids compiler  warnings. In C++, this case isn't necessary     *)
        (* because assigning a subtype to a supertype is permitted.         *)
        GenStr("(");
        GenQName(l, formal.typ.decl.qname);
        GenStr("*)");
      END;
      GenStr("&(");
      GenExpr(l, e);
      GenStr(")");
    ELSIF (e.typ.kind = AST.typeBuffer) &
          (formal.typ.kind = AST.typeArray) THEN
      (* Convert buffer to an open array *)
      GenExpr(l, e);
      GenStr(".buf");
    ELSIF e.typ.kind = AST.typePointer THEN
      IF (e.typ # formal.typ) & ~genCPlusPlus THEN
        (* The formal parameter extends the actual parameter, so it is safe *)
        (* to cast the actual to the formal parameter, since the first      *)
        (* field of the actual parameter is the structure expected by the   *)
        (* formal parameter. This cast is not strictly necessary, but       *)
        (* avoids compiler  warnings. In C++, this case isn't necessary     *)
        (* because assigning a subtype to a supertype is permitted.         *)
        GenStr("((");
        GenQName(l, formal.typ.decl.qname);
        GenStr(")");
        GenExpr(l, e);
        GenStr(")");
      ELSE
        GenExpr(l, e);
      END;
    ELSE
      (* Everything else is passed by value.                        *)
      GenExpr(l, e);
    END;
    IF AST.IsOpenArray(formal.typ) THEN
      GenStr(", ");
      GenLengthof(l, e);
    END;
    IF (e.typ.kind = AST.typeRecord) & AST.NeedsTypeInfo(formal.typ) THEN
      GenStr(", ");
      IF e.kind = AST.exprPointerDeref THEN
        GenInt(e.typ.typeId);
      ELSE
        GenTypeId(l, e)
      END
    END;
    IF e.next # NIL THEN
      GenStr(", ");
    END;
    e := e.next;
    formal := formal.next;
  END;
  GenStr(")");
END GenProcCallExpr;

PROCEDURE GenFieldRefExpr(l: Lex.Lexer; e: AST.Expr);
VAR
  i: INTEGER;
BEGIN
  GenExpr(l, e.lhs);
  i := e.decl.nesting;
  IF ~genCPlusPlus THEN
    WHILE i > 0 DO
      GenStr("._base");
      DEC(i)
    END;
  END;
  GenStr(".");
  Lex.OutStr(l, e.iVal);
END GenFieldRefExpr;

PROCEDURE GenPointerDerefExpr(l: Lex.Lexer; e: AST.Expr);
BEGIN
  GenStr("(*");
  GenExpr(l, e.lhs);
  GenStr(")");
END GenPointerDerefExpr;

PROCEDURE GenBufferRefExpr(l: Lex.Lexer; e: AST.Expr);
BEGIN
  GenExpr(l, e.lhs);
  GenStr(".buf[");
  IF addBoundsChecks THEN
    GenStr("checkbounds(");
    GenExpr(l, e.rhs);
    GenStr(", ");
    GenLengthof(l, e.lhs);
    GenStr(")");
  ELSE
    GenExpr(l, e.rhs);
  END;
  GenStr("]");
END GenBufferRefExpr;

PROCEDURE GenArrayRefExpr(l: Lex.Lexer; e: AST.Expr);
BEGIN
  GenExpr(l, e.lhs);
  GenStr("[");
  IF addBoundsChecks THEN
    GenStr("checkbounds(");
    GenExpr(l, e.rhs);
    GenStr(", ");
    GenLengthof(l, e.lhs);
    GenStr(")");
  ELSE
    GenExpr(l, e.rhs);
  END;
  GenStr("]");
END GenArrayRefExpr;

PROCEDURE GenTypeGuardExpr(l: Lex.Lexer; e: AST.Expr);
VAR
  q: AST.QName;
BEGIN
  IF genCPlusPlus THEN
    IF e.lhs.typ.kind = AST.typePointer THEN
      GenStr("dynamic_cast<");
      GenQName(l, e.decl.qname);
      GenStr(">(");
      GenExpr(l, e.lhs);
      GenStr(")");
    ELSE
      ASSERT(e.lhs.typ.kind = AST.typeRecord);
      ASSERT(e.lhs.kind = AST.exprIdentRef);
      ASSERT(e.lhs.decl.kind = AST.declVarParam);
      GenStr("(*dynamic_cast<");
      GenQName(l, e.decl.qname);
      GenStr("*>(");
      q.moduleName := 0;
      q.name := e.lhs.decl.qname.name;
      GenQName(l, q);
      GenStr("))");
    END;
  ELSE
    IF e.lhs.typ.kind = AST.typePointer THEN
      GenStr("(assert(");
      IF e.iVal = 0 THEN
        GenTypeTest(l, e.lhs, e.typ);
      ELSE
        GenStr("1") (* The compiler asserts we can skip the type test (type case) *)
      END;
      GenStr("), ((");
      GenQName(l, e.decl.qname);
      GenStr(")(");
      GenExpr(l, e.lhs);
      GenStr(")))");
    ELSE
      ASSERT(e.lhs.typ.kind = AST.typeRecord);
      ASSERT(e.lhs.kind = AST.exprIdentRef);
      ASSERT(e.lhs.decl.kind = AST.declVarParam);
      GenStr("(*(assert(");
      IF e.iVal = 0 THEN
        GenTypeTest(l, e.lhs, e.typ);
      ELSE
        GenStr("1") (* The compiler asserts we can skip the type test (type case) *)
      END;
      GenStr("), ((");
      GenQName(l, e.decl.qname);
      GenStr("*)");
      q.moduleName := 0;
      q.name := e.lhs.decl.qname.name;
      GenQName(l, q);
      GenStr(")))");
    END;
  END;
END GenTypeGuardExpr;

PROCEDURE GenBuiltinExpr(l: Lex.Lexer; e: AST.Expr);
VAR
  q: AST.QName;
BEGIN
  q.moduleName := 0;
  q.name := 0;
  ASSERT(e.iVal >= AST.builtinAbs);
  ASSERT(e.iVal <= AST.builtinWriteLn);
  CASE e.iVal OF
    AST.builtinAbs: GenStr("oberon_abs("); GenExpr(l, e.rhs); GenStr(")");
  | AST.builtinAssert: GenStr("assert("); GenExpr(l, e.rhs); GenStr(")");
  | AST.builtinChr, AST.builtinOrd, AST.builtinFlt: GenExpr(l, e.rhs);
  | AST.builtinFloor: GenStr("((INTEGER)"); GenExpr(l, e.rhs); GenStr(")");
  | AST.builtinDec:
      GenExpr(l, e.rhs);
      IF e.rhs.next = NIL THEN
        GenStr("--");
      ELSE
        GenStr(" -= ");
        GenExpr(l, e.rhs.next);
      END;
  | AST.builtinInc:
      GenExpr(l, e.rhs);
      IF e.rhs.next = NIL THEN
        GenStr("++");
      ELSE
        GenStr(" += ");
        GenExpr(l, e.rhs.next);
      END;
  | AST.builtinInit:
      GenStr("oberon_buf_init(");
      GenExpr(l, e.rhs);
      GenStr(", ");
      GenExpr(l, e.rhs.next);
      GenStr(", ");
      GenType(l, e.rhs.typ.base, q, FALSE, FALSE);
      GenStr(")");
  | AST.builtinPush:
      GenStr("oberon_buf_push(");
      GenExpr(l, e.rhs);
      GenStr(", ");
      GenExpr(l, e.rhs.next);
      GenStr(", ");
      GenType(l, e.rhs.typ.base, q, FALSE, FALSE);
      GenStr(")");
  | AST.builtinLen: GenLengthof(l, e.rhs)
  | AST.builtinNew:
      IF AST.NeedsTypeInfo(e.rhs.typ) THEN
        (* The pointer to a type that needs a typeinfo is at least 4 bytes  *)
        (* larger than needed. The 4 bytes before the pointer then get used *)
        (* to store the typeid (dynamic type) of the thing pointed to.      *)
        GenExpr(l, e.rhs);
        IF genCPlusPlus THEN
          GenStr(" = new ");
          GenQName(l, e.rhs.typ.base.decl.qname);
          GenStr("[2]");
        ELSE
          GenStr(" = malloc(2*sizeof(");
          GenQName(l, e.rhs.typ.base.decl.qname);
          GenStr("))");
        END;
        GenStr(";");
        GenLn;
        GenI;
        GenExpr(l, e.rhs);
        GenStr("++;");
        GenLn;
        GenI;
        GenStr("*(((oberon_typeid*)");
        GenExpr(l, e.rhs);
        GenStr(")-1) = ");
        GenInt(e.rhs.typ.base.typeId);
      ELSE
        GenExpr(l, e.rhs);
        IF genCPlusPlus THEN
          GenStr(" = new ");
          GenQName(l, e.rhs.typ.base.decl.qname);
        ELSE
          GenStr(" = malloc(sizeof(");
          GenQName(l, e.rhs.typ.base.decl.qname);
          GenStr("))");
        END;
      END;
  | AST.builtinReadInt:
    GenStr("scanf("); GenStr(22X); GenStr("%d"); GenStr(22X); GenStr(", &(");
    GenExpr(l, e.rhs);
    GenStr("))");
  | AST.builtinWriteInt:
    GenStr("printf("); GenStr(22X); GenStr("%4d"); GenStr(22X); GenStr(", ");
    GenExpr(l, e.rhs);
    GenStr(")");
  | AST.builtinWriteChar:
    GenStr("putchar(");
    GenExpr(l, e.rhs);
    GenStr(")");
  | AST.builtinWriteLn:
    GenStr("putchar('\n')");
  END;
END GenBuiltinExpr;

PROCEDURE GenAssignExpr(l: Lex.Lexer; e: AST.Expr);
VAR
  t: AST.Type;
BEGIN
  IF e.lhs.typ.kind = AST.typeArray THEN
    ASSERT(e.lhs.typ.base.kind = AST.typeChar);
    GenStr("strncpy(");
    GenExpr(l, e.lhs);
    GenStr(", ");
    GenExpr(l, e.rhs);
    GenStr(", ");
    GenLengthof(l, e.lhs);
    GenStr(")");
  ELSIF ~genCPlusPlus &
        (e.lhs.typ.kind = AST.typeRecord) &
        (e.rhs.typ.kind = AST.typeRecord) &
        (e.lhs.typ # e.rhs.typ) THEN
    GenExpr(l, e.lhs);
    GenStr(" = ");
    GenExpr(l, e.rhs);
    t := e.rhs.typ;
    WHILE t # e.lhs.typ DO
      GenStr("._base");
      t := t.base;
    END;
  ELSIF ~genCPlusPlus &
        (e.lhs.typ.kind = AST.typePointer) &
        (e.lhs.typ # e.rhs.typ) THEN
    (* The compiler has already ensured that it is safe to cast one pointer *)
    (* to another (downcasting), so simply place the cast here.             *)
    GenExpr(l, e.lhs);
    GenStr(" = ");
    GenStr("((");
    GenQName(l, e.lhs.typ.decl.qname);
    GenStr(")");
    GenExpr(l, e.rhs);
    GenStr(")");
  ELSE
    GenExpr(l, e.lhs);
    GenStr(" = ");
    GenExpr(l, e.rhs);
  END;
END GenAssignExpr;

PROCEDURE GenExpr0(l: Lex.Lexer; e: AST.Expr);
BEGIN
  ASSERT(e # NIL);
  ASSERT(e.kind >= AST.exprVal);
  ASSERT(e.kind <= AST.exprAssign);
  CASE e.kind OF
    AST.exprVal: GenVal(l, e)
  | AST.exprUnary: GenUnaryExpr(l, e)
  | AST.exprBinary: GenBinaryExpr(l, e)
  | AST.exprIdentRef: GenIdentRefExpr(l, e)
  | AST.exprProcCall: GenProcCallExpr(l, e)
  | AST.exprFieldRef: GenFieldRefExpr(l, e)
  | AST.exprPointerDeref: GenPointerDerefExpr(l, e)
  | AST.exprBufferRef: GenBufferRefExpr(l, e)
  | AST.exprArrayRef: GenArrayRefExpr(l, e)
  | AST.exprTypeGuard: GenTypeGuardExpr(l, e)
  | AST.exprBuiltin: GenBuiltinExpr(l, e)
  | AST.exprAssign: GenAssignExpr(l, e)
  END;
END GenExpr0;

PROCEDURE GenParenExpr(l: Lex.Lexer; e: AST.Expr);
BEGIN
  IF e.kind = AST.exprBinary THEN
    GenExpr(l, e);
  ELSE
    GenStr("(");
    GenExpr(l, e);
    GenStr(")");
  END;
END GenParenExpr;

PROCEDURE ForForwards(e: AST.Expr): BOOLEAN;
BEGIN
  RETURN (e = NIL) OR
         ((e.typ.kind = AST.typeInteger) & (e.iVal > 0)) OR
         ((e.typ.kind = AST.typeReal) & (e.rVal > 0.0))
END ForForwards;

PROCEDURE GenStatements(l: Lex.Lexer; s: AST.Stmt);
VAR
  e:              AST.Expr;
  fromVal, toVal: INTEGER;
  useChar:        BOOLEAN;
BEGIN
  WHILE s # NIL DO
    ASSERT(s.kind >= AST.stmtAssign);
    ASSERT(s.kind <= AST.stmtEmpty);
    IF ~(s.kind IN {AST.stmtEmpty, AST.stmtCase, AST.stmtCaseItem}) THEN
      GenI
    END;
    CASE s.kind OF
      AST.stmtAssign, AST.stmtProcCall:
        GenExpr(l, s.cond);
        GenStr(";");
    | AST.stmtReturn:
        GenStr("return ");
        GenExpr(l, s.cond);
        GenStr(";");
    | AST.stmtIf:
        GenStr("if ");
        GenParenExpr(l, s.cond);
        GenStr(" {");
        GenLn;
        INC(indent);
        GenStatements(l, s.body);
        DEC(indent);
        GenStatements(l, s.elsifs);
        GenI;
        GenStr("}");
    | AST.stmtWhile:
        IF s.elsifs = NIL THEN
          GenStr("while ");
          GenParenExpr(l, s.cond);
          GenStr(" {");
          GenLn;
          INC(indent);
          GenStatements(l, s.body);
          DEC(indent);
          GenI;
          GenStr("}");
        ELSE
          GenStr("while (1) {");
          GenLn;
          INC(indent);
          GenI;
          GenStr("if ");
          GenParenExpr(l, s.cond);
          GenStr(" {");
          GenLn;
          INC(indent);
          GenStatements(l, s.body);
          DEC(indent);
          GenStatements(l, s.elsifs);
          GenI;
          GenStr("} else { break; }");
          GenLn;
          DEC(indent);
          GenI;
          GenStr("}");
        END;
    | AST.stmtRepeat:
        GenStr("do {");
        GenLn;
        INC(indent);
        GenStatements(l, s.body);
        DEC(indent);
        GenI;
        GenStr("} while (!");
        GenExpr(l, s.cond);
        GenStr(");");
        GenLn;
    | AST.stmtFor:
        (* Cond is an assign, so cond.lhs is the LCV, and cond.rhs the init *)
        GenStr("for (");
        GenExpr(l, s.cond);
        GenStr("; ");
        GenExpr(l, s.cond.lhs);
        IF ForForwards(s.cond.next.next) THEN
          GenStr(" <= ");
        ELSE
          GenStr(" >= ");
        END;
        GenExpr(l, s.cond.next);
        GenStr("; ");
        GenExpr(l, s.cond.lhs);
        IF s.cond.next.next = NIL THEN
          IF ForForwards(s.cond.next.next) THEN GenStr("++") ELSE GenStr("--") END;
        ELSE
          GenStr(" += "); GenExpr(l, s.cond.next.next);
        END;
        GenStr(") {");
        GenLn;
        INC(indent);
        GenStatements(l, s.body);
        DEC(indent);
        GenI;
        GenStr("}");
    | AST.stmtCase:
        GenStr("switch ");
        GenParenExpr(l, s.cond);
        GenStr(" {");
        INC(indent);
        GenStatements(l, s.elsifs);
        DEC(indent);
        GenI;
        GenStr("}");
        GenLn;
    | AST.stmtCaseItem:
        (* Case items have a special cond, which has possibly more than one *)
        (* expr. The expr is either an equal (where the lhs is the case,    *)
        (* which can be ignored), or a CaseDotDot operator, which should be *)
        (* expanded here since the cases must be constant.                  *)
        GenLn;
        ASSERT(s.next = NIL);
        ASSERT(s.cond.kind = AST.exprBinary);
        e := s.cond;
        WHILE e # NIL DO
          ASSERT((e.op = Lex.tEQ) OR (e.op = Lex.tCaseDotDot));
          IF e.op = Lex.tEQ THEN
            ASSERT(AST.IsConst(e.rhs));
            useChar := e.rhs.typ.kind = AST.typeChar;
            fromVal := e.rhs.iVal;
            toVal := fromVal;
          ELSE
            ASSERT(AST.IsConst(e.lhs.rhs));
            ASSERT(AST.IsConst(e.rhs.rhs));
            useChar := e.rhs.rhs.typ.kind = AST.typeChar;
            fromVal := e.lhs.rhs.iVal;
            toVal := e.rhs.rhs.iVal;
          END;
          WHILE fromVal <= toVal DO
            GenI; GenStr("case ");
            IF useChar THEN GenChar(fromVal) ELSE GenInt(fromVal) END;
            GenStr(":"); GenLn;
            INC(fromVal);
          END;
          e := e.next;
        END;
        INC(indent);
        GenStatements(l, s.body);
        GenI; GenStr("break;"); GenLn;
        DEC(indent);
        GenStatements(l, s.elsifs);
    | AST.stmtElsIf:
        ASSERT(s.next = NIL);
        GenStr("} else if ");
        GenParenExpr(l, s.cond);
        GenStr(" {");
        GenLn;
        INC(indent);
        GenStatements(l, s.body);
        DEC(indent);
        GenStatements(l, s.elsifs);
    | AST.stmtElse:
        ASSERT(s.elsifs = NIL);
        ASSERT(s.next = NIL);
        GenStr("} else {");
        GenLn;
        INC(indent);
        GenStatements(l, s.body);
        DEC(indent);
    END;
    IF ~(s.kind IN {AST.stmtEmpty, AST.stmtCase, AST.stmtCaseItem}) THEN
      GenLn
    END;
    s := s.next;
  END;
END GenStatements;

PROCEDURE GenTypedef(l: Lex.Lexer; d: AST.Decl);
BEGIN
  IF d.typ.kind # AST.typeNil THEN
    GenI;
    GenStr("typedef ");
    GenType(l, d.typ, d.qname, TRUE, FALSE);
    GenStr(";");
    GenLn;
  END;
END GenTypedef;

PROCEDURE GenVar(l: Lex.Lexer; d: AST.Decl);
BEGIN
  GenType(l, d.typ, d.qname, FALSE, FALSE);
  GenStr(";");
  GenLn;
END GenVar;

PROCEDURE RenameInnerProc(VAR l: Lex.Lexer; d: AST.Decl);
VAR
  name: ARRAY 10 OF CHAR;
BEGIN
  Lex.MakeDummy(innerProcCount, name);
  d.qname.name := Lex.Intern(l, name);
  INC(innerProcCount)
END RenameInnerProc;

PROCEDURE GenProc(VAR l: Lex.Lexer; d: AST.Decl);
VAR
  p: AST.Decl;
  q: AST.QName;
BEGIN
  q.moduleName := 0;
  GenType(l, d.typ, d.qname, FALSE, TRUE);
  GenStr(";");
  GenLn;
  IF d.procVars # NIL THEN
    p := d.procVars;
    WHILE p.kind # AST.declEND DO
      IF p.kind = AST.declProcedure THEN
        (* Give nested procedures a unique name, because they need to be *)
        (* defined at top level. Ensure they are distinct.               *)
        RenameInnerProc(l, p);
        GenProc(l, p);
      ELSIF p.kind = AST.declType THEN
        GenTypedef(l, p);
        GenLn
      END;
      p := p.next;
    END;
  END;
  GenType(l, d.typ, d.qname, FALSE, TRUE);
  GenStr(" {");
  GenLn;
  INC(indent);
  IF d.procVars # NIL THEN
    p := d.procVars;
    WHILE p.kind # AST.declEND DO
      q.name := p.qname.name;
      IF p.kind = AST.declVar THEN
        IF p.state = AST.stateUnresolved THEN
          GenStr("#pragma GCC warning ");
          GenStr(22X);
          GenStr("variable ");
          GenQName(l, q);
          GenStr(" unused in PROCEDURE ");
          GenQName(l, d.qname);
          GenStr(22X);
          GenLn;
        END;
        GenI;
        GenType(l, p.typ, q, FALSE, FALSE);
        GenStr(";");
        GenLn;
      ELSIF AST.NeedsTypeInfo(p.typ) &
            (p.typ.kind = AST.typeRecord) &
            ((p.kind = AST.declVarParam) OR (p.kind = AST.declParam)) THEN
        (* Generate code to avoid unused variable warnings *)
        GenI;
        GenStr("(void)");
        GenQName(l, q);
        GenStr("__typeid;");
        GenLn;
      ELSIF AST.IsOpenArray(p.typ) THEN
        (* Generate code to avoid unused variable warnings *)
        GenI;
        GenStr("(void)");
        GenQName(l, q);
        GenStr("__len;");
        GenLn;
      END;
      p := p.next;
    END;
  END;
  GenStatements(l, d.body);
  IF d.expr # NIL THEN
    GenI;
    GenStr("return (");
    GenExpr(l, d.expr);
    GenStr(");");
    GenLn;
  END;
  DEC(indent);
  GenI;
  GenStr("}");
  GenLn;
END GenProc;

PROCEDURE Generate*(VAR l: Lex.Lexer; d: AST.Decl);
BEGIN
  IF d.nesting = 0 THEN
    CASE d.kind OF
      AST.declType: GenTypedef(l, d);
    | AST.declVar: GenVar(l, d);
    | AST.declProcedure: GenProc(l, d);
    END;
  END;
END Generate;

PROCEDURE GenStartMain*;
BEGIN
  GenStr("int main(int argc, const char **argv) {");
  GenLn;
  INC(indent);
  GenI; GenStr("InitArgs(argc, argv);"); GenLn;
END GenStartMain;

PROCEDURE GenCall*(l: Lex.Lexer; name: AST.QName);
BEGIN
  GenI;
  GenQName(l, name);
  GenStr("();");
  GenLn;
END GenCall;

PROCEDURE GenEndMain*;
BEGIN
  DEC(indent);
  GenI;
  GenStr("}");
  GenLn;
END GenEndMain;

PROCEDURE EnableBoundsChecks*;
BEGIN
  addBoundsChecks := TRUE
END EnableBoundsChecks;

PROCEDURE EnableCPlusPlus*;
BEGIN
  genCPlusPlus := TRUE
END EnableCPlusPlus;

BEGIN
  GenExpr := GenExpr0;
  addBoundsChecks := FALSE;
  genCPlusPlus := FALSE;
  indent := 0;
  innerProcCount := 0
END CCodegen.
