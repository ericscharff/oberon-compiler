(*
 * This file is part of oberon-compiler
 *
 * Copyright (C) 2018-2025  Eric Scharff
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *)

MODULE Decls;

IMPORT AST, Lex;

TYPE
  StringId  = Lex.PoolIndex;
  Forward   = POINTER TO FwdDecl;
  FwdDecl   = RECORD
    t:    AST.Type;
    next: Forward;
  END;
  ReachableDecl* = POINTER TO ReachableDesc;
  ReachableDesc  = RECORD
    d*:    AST.Decl;
    next*: ReachableDecl;
  END;

VAR
  nilType*, integerType*, realType*, booleanType*,
    charType*, setType*, stringType*: AST.Type;
  modInitName*: StringId;
  scope, globalScope: AST.Decl;
  reachableDecls*, tailReachable: ReachableDecl;
  fwds:  Forward;
  genSymNum: INTEGER;
  VisitDecl*: PROCEDURE (d: AST.Decl);

PROCEDURE LookupDecl0(name: StringId): AST.Decl;
VAR
  p: AST.Decl;
BEGIN
  p := scope;
  WHILE (p # NIL) & (p.qname.name # name) DO
    p := p.next;
  END;
  RETURN p
END LookupDecl0;

PROCEDURE LookupDecl*(l: Lex.Lexer; name: StringId): AST.Decl;
VAR
  p: AST.Decl;
BEGIN
  p := LookupDecl0(name);
  IF p = NIL THEN
    Lex.Error(l, "");
    Lex.OutStr(l, name);
    Lex.PrintLnAndHalt(" undefined");
  END;
  RETURN p
END LookupDecl;

PROCEDURE LookupImport*(l: Lex.Lexer; moduleName, name: StringId): AST.Decl;
VAR
  p, d: AST.Decl;
BEGIN
  d := LookupDecl(l, moduleName);
  ASSERT(d.kind = AST.declImport);
  p := d.typ.fields;
  WHILE (p # NIL) & (p.qname.name # name) DO
    p := p.next;
  END;
  IF p = NIL THEN
    Lex.Error(l, "");
    Lex.OutStr(l, moduleName);
    Lex.Str(".");
    Lex.OutStr(l, name);
    Lex.PrintLnAndHalt(" undefined");
  ELSIF ~p.exported THEN
    Lex.Error(l, "");
    Lex.OutStr(l, moduleName);
    Lex.Str(".");
    Lex.OutStr(l, name);
    Lex.PrintLnAndHalt(" is not exported");
  END;
  RETURN p
END LookupImport;

PROCEDURE NewDecl(VAR d: AST.Decl; name: StringId);
BEGIN
  NEW(d);
  d.qname.name := name;
  d.qname.moduleName := AST.currentModuleName;
  d.kind := 0;
  d.typ := NIL;
  d.origTyp := NIL;
  d.expr := NIL;
  d.body := NIL;
  d.next := NIL;
  d.nesting := 0;
  d.procVars := NIL;
  d.exported := FALSE;
  d.isNative := FALSE;
  d.state := AST.stateUnresolved;
  d.offset := -1;
END NewDecl;

PROCEDURE AddDecl*(l: Lex.Lexer; VAR chain: AST.Decl; name: StringId): AST.Decl;
VAR
  p, d: AST.Decl;
BEGIN
  NewDecl(d, name);
  IF chain = NIL THEN
    NewDecl(chain, 0);
    chain.kind := AST.declEND;
  END;
  IF chain.kind = AST.declEND THEN
    d.next := chain;
    chain := d;
  ELSE
    p := chain;
    WHILE (p.next.kind # AST.declEND) & (p.qname.name # name) DO
      p := p.next;
    END;
    IF p.qname.name = name THEN
      Lex.Error(l, "");
      Lex.OutStr(l, name);
      Lex.PrintLnAndHalt(" already defined");
    ELSE
      d.next := p.next;
      p.next := d;
    END;
  END;
  RETURN d
END AddDecl;

PROCEDURE AddScopeDecl*(l: Lex.Lexer; name: StringId): AST.Decl;
BEGIN
  RETURN AddDecl(l, scope, name)
END AddScopeDecl;

PROCEDURE NewType(VAR t: AST.Type; kind: AST.TypeKind);
BEGIN
  NEW(t);
  t.kind := kind;
  t.base := NIL;
  t.fields := NIL;
  t.length := 0;
  t.nesting := 0;
  t.needTypeInfo := FALSE;
  t.decl := NIL;
  t.reachable := FALSE;
END NewType;

PROCEDURE AddImportDecl*(l: Lex.Lexer; name: StringId; decls: AST.Decl);
VAR
  d: AST.Decl;
BEGIN
  d := AddScopeDecl(l, name);
  d.kind := AST.declImport;
  NewType(d.typ, AST.typeImport);
  d.typ.fields := decls;
END AddImportDecl;

PROCEDURE NewBufferType*(base: AST.Type): AST.Type;
VAR
  t: AST.Type;
BEGIN
  NewType(t, AST.typeBuffer);
  t.length := -1;
  t.base := base;
  RETURN t
END NewBufferType;

PROCEDURE NewArrayType*(l: Lex.Lexer; length: AST.Expr): AST.Type;
VAR
  t: AST.Type;
BEGIN
  NewType(t, AST.typeArray);
  IF AST.IsConst(length) & (length.typ.kind = AST.typeInteger) THEN
    t.length := length.iVal;
  ELSE
    Lex.ErrorLn(l, "ARRAY length must be a CONST INTEGER");
  END;
  RETURN t
END NewArrayType;

PROCEDURE MakeSyntheticDecl(VAR l: Lex.Lexer; base: AST.Type);
VAR
  name: ARRAY 10 OF CHAR;
BEGIN
  ASSERT(base.kind = AST.typeRecord);
  IF base.decl = NIL THEN
    Lex.MakeDummy(genSymNum, name);
    NewDecl(base.decl, Lex.Intern(l, name));
    base.decl.kind := AST.declType;
    base.decl.typ := base;
    INC(genSymNum);
  END;
END MakeSyntheticDecl;

PROCEDURE NewPointerType*(VAR l: Lex.Lexer; base: AST.Type): AST.Type;
VAR
  t: AST.Type;
BEGIN
  t := NIL;
  IF (base # NIL) & (base.kind # AST.typeRecord) THEN
    Lex.ErrorLn(l, "Pointer base type must be a RECORD");
  ELSE
    MakeSyntheticDecl(l, base);
    NewType(t, AST.typePointer);
    t.base := base;
  END;
  RETURN t
END NewPointerType;

PROCEDURE NewPointerTypeByName*(VAR l: Lex.Lexer; name: StringId): AST.Type;
VAR
  d: AST.Decl;
  f: Forward;
  t: AST.Type;
BEGIN
  t := NIL;
  d := LookupDecl0(name);
  IF d = NIL THEN
    (* forward decl *)
    NewType(t, AST.typePointer);
    NewDecl(t.fields, name);
    NEW(f);
    f.t := t;
    f.next := fwds;
    fwds := f;
  ELSE
    IF d.kind # AST.declType THEN
      Lex.Error(l, "");
      Lex.OutStr(l, d.qname.name);
      Lex.PrintLnAndHalt(" is not a TYPE");
    END;
    t := NewPointerType(l, d.typ);
  END;
  RETURN t
END NewPointerTypeByName;

PROCEDURE NewProcedureType*(): AST.Type;
VAR
  t: AST.Type;
BEGIN
  NewType(t, AST.typeProcedure);
  t.base := nilType;
  RETURN t
END NewProcedureType;

PROCEDURE CountProcedureArgs*(t: AST.Type);
VAR
  i: INTEGER;
  p: AST.Decl;
BEGIN
  i := 0;
  p := t.fields;
  WHILE (p # NIL) & (p.kind # AST.declEND) DO
    INC(i);
    p := p.next;
  END;
  t.length := i;
END CountProcedureArgs;

PROCEDURE NewRecordType*(l: Lex.Lexer; base: AST.Type): AST.Type;
VAR
  t:        AST.Type;
  d, dCopy: AST.Decl;
BEGIN
  NewType(t, AST.typeRecord);
  t.base := base;
  t.typeId := AST.GetNextTypeId();
  IF base = NIL THEN
    AST.SetRecordToParent(t.typeId, 0);
  ELSE
    AST.SetRecordToParent(t.typeId, base.typeId);
    t.nesting := base.nesting + 1;
  END;
  IF base # NIL THEN
    IF base.kind = AST.typeRecord THEN
      (* Copy fields from base *)
      d := base.fields;
      WHILE (d # NIL) & (d.kind # AST.declEND) DO
        dCopy := AddDecl(l, t.fields, d.qname.name);
        dCopy.kind := d.kind;
        dCopy.typ := d.typ;
        dCopy.exported := d.exported;
        dCopy.nesting := d.nesting + 1;
        d := d.next;
      END;
    ELSE
      Lex.ErrorLn(l, "RECORD base type is not a RECORD");
    END;
  END;
  RETURN t
END NewRecordType;

PROCEDURE NewModuleInitDecl*(body: AST.Stmt);
VAR
  d: AST.Decl;
BEGIN
  NewDecl(d, modInitName);
  d.kind := AST.declProcedure;
  d.typ := NewProcedureType();
  d.body := body;
  d.next := scope;
  scope := d;
END NewModuleInitDecl;

PROCEDURE AddTypeDecl(VAR l: Lex.Lexer; name: StringId; t: AST.Type);
VAR
  d: AST.Decl;
BEGIN
  d := AddDecl(l, scope, name);
  d.kind := AST.declType;
  d.typ := t;
  IF d.typ.decl = NIL THEN d.typ.decl := d END;
END AddTypeDecl;

PROCEDURE AddBuiltin(VAR l: Lex.Lexer; name: StringId; callback: AST.BuiltinResolver);
VAR
  d: AST.Decl;
BEGIN
  d := AddDecl(l, scope, name);
  d.kind := AST.declBuiltin;
  d.typ := nilType;
  d.resolver := callback;
END AddBuiltin;

(* Native procedure declarations. *)
(* Lowercase names because they are private callbacks *)
PROCEDURE builtinAbs(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinAbs;
  e.rhs := args;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "ABS expects 1 argument");
  END;
  IF args.typ.kind IN {AST.typeInteger, AST.typeReal} THEN
    e.typ := args.typ;
  ELSE
    Lex.ErrorLn(l, "ABS expects INTEGER or REAL");
  END;
  RETURN e
END builtinAbs;

PROCEDURE builtinInc(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinInc;
  e.rhs := args;
  IF (args = NIL) OR ((args.next # NIL) & (args.next.next # NIL)) THEN
    Lex.ErrorLn(l, "INC expects 1 or 2 arguments");
  END;
  IF ~args.assignable THEN
    Lex.ErrorLn(l, "First argument to INC must be assignable");
  END;
  IF (args.next # NIL) & (args.next.typ.kind # AST.typeInteger) THEN
    Lex.ErrorLn(l, "Second arg to INC must be an INTEGER");
  END;
  RETURN e
END builtinInc;

PROCEDURE builtinDec(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinDec;
  e.rhs := args;
  IF (args = NIL) OR ((args.next # NIL) & (args.next.next # NIL)) THEN
    Lex.ErrorLn(l, "DEC expects 1 or 2 arguments");
  END;
  IF ~args.assignable THEN
    Lex.ErrorLn(l, "First argument to DEC must be assignable");
  END;
  IF (args.next # NIL) & (args.next.typ.kind # AST.typeInteger) THEN
    Lex.ErrorLn(l, "Second arg to DEC must be an INTEGER");
  END;
  RETURN e
END builtinDec;

PROCEDURE builtinAssert(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinAssert;
  e.rhs := args;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "ASSERT expects 1 argument");
  END;
  IF args.typ.kind = AST.typeBoolean THEN
    e.typ := args.typ;
  ELSE
    Lex.ErrorLn(l, "ASSERT expects a BOOLEAN");
  END;
  RETURN e
END builtinAssert;

PROCEDURE builtinOrd(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinOrd;
  e.rhs := args;
  IF AST.IsConst(e.rhs) THEN AST.CoerceToChar(l, e.rhs, charType) END;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "ORD expects 1 argument");
  END;
  IF (args.typ.kind IN {AST.typeSet, AST.typeChar, AST.typeBoolean}) OR
     ((args.typ.kind = AST.typeString) & Lex.IsOneChar(l, args.iVal)) THEN
    e.typ := integerType;
  ELSE
    Lex.ErrorLn(l, "ORD expects CHAR, BOOLEAN, or SET");
  END;
  RETURN e
END builtinOrd;

PROCEDURE builtinChr(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinChr;
  e.rhs := args;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "CHR expects 1 argument");
  END;
  IF args.typ.kind = AST.typeInteger THEN
    e.typ := charType;
  ELSE
    Lex.ErrorLn(l, "CHR expects an INTEGER");
  END;
  RETURN e
END builtinChr;

PROCEDURE builtinFloor(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinFloor;
  e.rhs := args;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "FLOOR expects 1 argument");
  END;
  IF args.typ.kind = AST.typeReal THEN
    e.typ := integerType;
  ELSE
    Lex.ErrorLn(l, "FLOOR expects a REAL");
  END;
  RETURN e
END builtinFloor;

PROCEDURE builtinFlt(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinFlt;
  e.rhs := args;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "FLT expects 1 argument");
  END;
  IF args.typ.kind = AST.typeInteger THEN
    e.typ := realType;
  ELSE
    Lex.ErrorLn(l, "FLT expects an INTEGER");
  END;
  RETURN e
END builtinFlt;

PROCEDURE builtinLen(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinLen;
  e.rhs := args;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "LEN expects 1 argument");
  END;
  IF args.typ.kind IN {AST.typeArray, AST.typeBuffer} THEN
    e.typ := integerType;
  ELSE
    Lex.ErrorLn(l, "LEN expects an ARRAY");
  END;
  RETURN e
END builtinLen;

PROCEDURE builtinInit(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinInit;
  e.rhs := args;
  IF (args = NIL) OR (args.next = NIL) OR (args.next.next # NIL) THEN
    Lex.ErrorLn(l, "NEW_ARRAY expects 2 arguments");
  END;
  IF args.next.typ.kind # AST.typeInteger THEN
    Lex.ErrorLn(l, "Second arg to NEW_ARRAY must be an INTEGER");
  END;
  IF args.typ.kind = AST.typeBuffer THEN
    e.typ := nilType;
  ELSE
    Lex.ErrorLn(l, "First arg to NEW_ARRAY expects an ARRAY *");
  END;
  RETURN e
END builtinInit;

PROCEDURE builtinPush(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinPush;
  e.rhs := args;
  IF (args = NIL) OR (args.next = NIL) OR (args.next.next # NIL) THEN
    Lex.ErrorLn(l, "PUSH expects 2 arguments");
  END;
  IF ~args.assignable THEN
    Lex.ErrorLn(l, "First argument to PUSH must be assignable");
  END;
  IF args.next.typ # args.typ.base THEN
    Lex.ErrorLn(l, "Second arg to PUSH must have same type as ARRAY");
  END;
  IF args.typ.kind = AST.typeBuffer THEN
    e.typ := nilType;
  ELSE
    Lex.ErrorLn(l, "First arg to PUSH expects an ARRAY *");
  END;
  RETURN e
END builtinPush;

PROCEDURE builtinNew(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinNew;
  e.rhs := args;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "NEW expects 1 argument");
  END;
  IF ~args.assignable THEN
    Lex.ErrorLn(l, "First argument to NEW must be assignable");
  END;
  IF args.typ.kind = AST.typePointer THEN
    e.typ := args.typ;
  ELSE
    Lex.ErrorLn(l, "NEW expects a POINTER");
  END;
  RETURN e
END builtinNew;

PROCEDURE builtinReadInt(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinReadInt;
  e.rhs := args;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "ReadInt expects 1 argument");
  END;
  IF ~args.assignable THEN
    Lex.ErrorLn(l, "Argument to ReadInt must be assignable");
  END;
  RETURN e
END builtinReadInt;

PROCEDURE builtinWriteInt(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinWriteInt;
  e.rhs := args;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "WriteInt expects 1 argument");
  END;
  RETURN e
END builtinWriteInt;

PROCEDURE builtinWriteChar(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinWriteChar;
  e.rhs := args;
  IF (args = NIL) OR (args.next # NIL) THEN
    Lex.ErrorLn(l, "WriteChar expects 1 argument");
  END;
  IF e.rhs.typ.kind = AST.typeString THEN AST.CoerceToChar(l, e.rhs, charType) END;
  RETURN e
END builtinWriteChar;

PROCEDURE builtinWriteLn(l: Lex.Lexer; args: AST.Expr): AST.Expr;
VAR
  e: AST.Expr;
BEGIN
  AST.NewExpr(e, AST.exprBuiltin, nilType);
  e.iVal := AST.builtinWriteLn;
  e.rhs := args;
  IF args # NIL THEN
    Lex.ErrorLn(l, "WriteLn expects 0 arguments");
  END;
  RETURN e
END builtinWriteLn;

PROCEDURE InitGlobalScope*(VAR l: Lex.Lexer);
BEGIN
  fwds := NIL;
  IF globalScope = NIL THEN
    scope := NIL;
    NewType(nilType, AST.typeNil);
    AddTypeDecl(l, Lex.Intern(l, "NIL"), nilType);
    NewType(integerType, AST.typeInteger);
    AddTypeDecl(l, Lex.Intern(l, "INTEGER"), integerType);
    AddTypeDecl(l, Lex.Intern(l, "BYTE"), integerType);
    NewType(realType, AST.typeReal);
    AddTypeDecl(l, Lex.Intern(l, "REAL"), realType);
    NewType(booleanType, AST.typeBoolean);
    AddTypeDecl(l, Lex.Intern(l, "BOOLEAN"), booleanType);
    NewType(charType, AST.typeChar);
    AddTypeDecl(l, Lex.Intern(l, "CHAR"), charType);
    NewType(setType, AST.typeSet);
    AddTypeDecl(l, Lex.Intern(l, "SET"), setType);
    NewType(stringType, AST.typeString);
    (* Builtins *)
    AddBuiltin(l, Lex.Intern(l, "ABS"), builtinAbs);
    AddBuiltin(l, Lex.Intern(l, "INC"), builtinInc);
    AddBuiltin(l, Lex.Intern(l, "DEC"), builtinDec);
    AddBuiltin(l, Lex.Intern(l, "ASSERT"), builtinAssert);
    AddBuiltin(l, Lex.Intern(l, "ORD"), builtinOrd);
    AddBuiltin(l, Lex.Intern(l, "CHR"), builtinChr);
    AddBuiltin(l, Lex.Intern(l, "FLOOR"), builtinFloor);
    AddBuiltin(l, Lex.Intern(l, "FLT"), builtinFlt);
    AddBuiltin(l, Lex.Intern(l, "LEN"), builtinLen);
    AddBuiltin(l, Lex.Intern(l, "NEW"), builtinNew);
    AddBuiltin(l, Lex.Intern(l, "NEW_ARRAY"), builtinInit);
    AddBuiltin(l, Lex.Intern(l, "PUSH"), builtinPush);
    (* Oberon-0 Builtins *)
    AddBuiltin(l, Lex.Intern(l, "ReadInt"), builtinReadInt);
    (*
    AddBuiltin(l, Lex.Intern(l, "WriteInt"), builtinWriteInt);
    AddBuiltin(l, Lex.Intern(l, "WriteChar"), builtinWriteChar);
    AddBuiltin(l, Lex.Intern(l, "WriteLn"), builtinWriteLn);
    *)
    IF Lex.ignoreKeywordCase THEN
      AddTypeDecl(l, Lex.Intern(l, "nil"), nilType);
      AddTypeDecl(l, Lex.Intern(l, "integer"), integerType);
      AddTypeDecl(l, Lex.Intern(l, "real"), realType);
      AddTypeDecl(l, Lex.Intern(l, "boolean"), booleanType);
      AddTypeDecl(l, Lex.Intern(l, "char"), charType);
      AddTypeDecl(l, Lex.Intern(l, "set"), setType);
    END;
    globalScope := scope;
    (* Special MODULE init function *)
    modInitName := Lex.Intern(l, "_module_init_");
  END;
  scope := globalScope;
END InitGlobalScope;

PROCEDURE ResolveForwards*(l: Lex.Lexer);
VAR
  d: AST.Decl;
BEGIN
  WHILE fwds # NIL DO
    ASSERT(fwds.t.kind = AST.typePointer);
    d := LookupDecl(l, fwds.t.fields.qname.name);
    IF (d # NIL) & (d.kind = AST.declType) & (d.typ.kind = AST.typeRecord) THEN
      fwds.t.base := d.typ;
      fwds.t.fields := NIL;
    ELSE
      Lex.Error(l, "Bad forward declaration ");
      Lex.OutStr(l, fwds.t.fields.qname.name);
      Lex.Ln;
    END;
    fwds := fwds.next;
  END;
END ResolveForwards;

PROCEDURE AddFormalParamsToScope*(l: Lex.Lexer; procDecl: AST.Decl);
VAR
  formal, actual: AST.Decl;
BEGIN
  ASSERT(procDecl.kind = AST.declProcedure);
  ASSERT(procDecl.typ.kind = AST.typeProcedure);
  formal := procDecl.typ.fields;
  WHILE formal # NIL DO
    actual := AddScopeDecl(l, formal.qname.name);
    actual.kind := formal.kind;
    actual.typ := formal.typ;
    formal := formal.next;
  END;
END AddFormalParamsToScope;

PROCEDURE CurrentScope*(): AST.Decl;
BEGIN
  RETURN scope
END CurrentScope;

PROCEDURE OpenScope*(): AST.Decl;
VAR
  d, oldScope: AST.Decl;
BEGIN
  NewDecl(d, 0);
  d.kind := AST.declEND;
  d.next := scope;
  oldScope := scope;
  scope := d;
  RETURN oldScope
END OpenScope;

PROCEDURE CloseScope*(s: AST.Decl);
BEGIN
  scope := s;
END CloseScope;

PROCEDURE VisitType(t: AST.Type);
VAR
  f: AST.Decl;
BEGIN
  IF (t # NIL) & ~t.reachable THEN
    t.reachable := TRUE;
    VisitType(t.base);
    f := t.fields;
    WHILE (f # NIL) & (f.kind # AST.declEND) DO
      VisitType(f.typ);
      f := f.next;
    END;
    IF t.decl # NIL THEN VisitDecl(t.decl); END;
  END;
END VisitType;

PROCEDURE VisitExpr(e: AST.Expr);
BEGIN
  WHILE e # NIL DO
    VisitExpr(e.lhs);
    VisitExpr(e.rhs);
    VisitType(e.typ);
    IF e.decl # NIL THEN VisitDecl(e.decl); END;
    e := e.next;
  END;
END VisitExpr;

PROCEDURE VisitStatement(s: AST.Stmt);
BEGIN
  WHILE s # NIL DO
    VisitExpr(s.cond);
    VisitStatement(s.body);
    VisitStatement(s.elsifs);
    s := s.next;
  END;
END VisitStatement;

PROCEDURE VisitDecl0(d: AST.Decl);
VAR
  p:         AST.Decl;
  reachable: ReachableDecl;
BEGIN
  IF d.state = AST.stateUnresolved THEN
    d.state := AST.stateResolving;
    IF d.qname.name = modInitName THEN
      (* MODULE inits are a bit special, they are followed by any decls *)
      (* that have been imported by the MODULE. Resolve these first.    *)
      p := d.next;
      WHILE p.kind # AST.declEND DO
        IF p.kind = AST.declImport THEN
          VisitDecl(p.typ.fields);
        END;
        p := p.next;
      END;
    END;
    VisitType(d.typ);
    VisitStatement(d.body);
    VisitExpr(d.expr);
    d.state := AST.stateResolved;
    NEW(reachable);
    reachable.d := d;
    reachable.next := NIL;
    IF reachableDecls = NIL THEN
      reachableDecls := reachable;
    ELSE
      tailReachable.next := reachable;
    END;
    tailReachable := reachable;
  ELSIF d.state = AST.stateResolving THEN
    IF d.kind # AST.declProcedure THEN
      (* Circular reference *)
      ASSERT(FALSE);
    END;
  ELSE
    ASSERT(d.state = AST.stateResolved);
  END;
END VisitDecl0;

PROCEDURE TestCleanup*;
BEGIN
  scope := NIL;
  globalScope := NIL;
END TestCleanup;

PROCEDURE TestDecls;
VAR
  l: Lex.Lexer;
  d: AST.Decl;
  t: AST.Type;
BEGIN
  Lex.LexerInitFromString(l, "");
  d := NIL;
  AddDecl(l, d, 10);
  AddDecl(l, d, 20);
  AddDecl(l, d, 30);
  AddDecl(l, d, 40);
  (* Expected error cases *)
  Lex.Mute;
  AddDecl(l, d, 10);
  AddDecl(l, d, 20);
  AddDecl(l, d, 30);
  AddDecl(l, d, 40);
  scope := d;
  ASSERT(LookupDecl(l, 20) # NIL);
  ASSERT(LookupDecl(l, 100) = NIL);
  Lex.Unmute;
  InitGlobalScope(l);
  ASSERT(LookupDecl(l, Lex.Intern(l, "NIL")) # NIL);
  d := LookupDecl(l, Lex.Intern(l, "NIL"));
  ASSERT(d.kind = AST.declType);
  ASSERT(d.typ.kind = AST.typeNil);
  d := LookupDecl(l, Lex.Intern(l, "INTEGER"));
  ASSERT(d.kind = AST.declType);
  t := d.typ;
  d := LookupDecl(l, Lex.Intern(l, "BYTE"));
  ASSERT(t = d.typ);
  TestCleanup;
  Lex.InfoPrintLn("PASS: Decls test");
END TestDecls;

PROCEDURE RunTests*;
BEGIN
  TestDecls
END RunTests;

BEGIN
  VisitDecl := VisitDecl0;
  genSymNum := 0;
  reachableDecls := NIL;
  tailReachable := NIL;
  globalScope := NIL;
END Decls.
