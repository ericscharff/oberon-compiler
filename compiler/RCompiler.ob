MODULE RCompiler;

IMPORT Args, AST, RCodegen, Decls, Lex, Parse;

PROCEDURE CompileFile;
VAR
  fileName: ARRAY 256 OF CHAR;
  l:        Lex.Lexer;
  p:        Decls.ReachableDecl;
  i:        INTEGER;
  gotFile:  BOOLEAN;
BEGIN
  (* Parse command line args *)
  i := 1;
  gotFile := FALSE;
  REPEAT
    Args.GetArg(fileName, i);
    IF fileName = "-dumpcode" THEN
      RCodegen.EnableDumpCode;
    ELSE
      gotFile := TRUE;
    END;
    INC(i);
  UNTIL gotFile;
  Parse.InitFromFile(fileName);
  Parse.ParseModule;
  l := Parse.l;

  Decls.VisitDecl(Parse.lastModuleDecls);
  p := Decls.reachableDecls;
  RCodegen.ReserveTypeinfos();
  WHILE p # NIL DO
    IF (p.d.kind = AST.declVar) & (p.d.nesting = 0) THEN
      RCodegen.AllocateGlobals(l, p.d);
    END;
    p := p.next
  END;
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF (p.d.kind = AST.declProcedure) & ~p.d.isNative THEN
      RCodegen.GenerateProc(l, p.d);
    END;
    p := p.next
  END;
  RCodegen.GenStartMain;
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF p.d.qname.name = Decls.modInitName THEN
      RCodegen.GenCall(p.d);
    END;
    p := p.next
  END;
  RCodegen.GenEndMain(l)
END CompileFile;

BEGIN
  CompileFile
END RCompiler.
