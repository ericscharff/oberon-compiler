(*
 * This file is part of oberon-compiler
 *
 * Copyright (C) 2018-2023  Eric Scharff
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *)

MODULE RCompiler;

IMPORT Args, AST, RCodegen, Decls, Lex, Parse;

PROCEDURE CompileFile;
VAR
  fileName: ARRAY 256 OF CHAR;
  l:        Lex.Lexer;
  p:        Decls.ReachableDecl;
  i:        INTEGER;
  gotFile:  BOOLEAN;
BEGIN
  (* Parse command line args *)
  i := 1;
  gotFile := FALSE;
  REPEAT
    Args.GetArg(fileName, i);
    IF fileName = "-dumpcode" THEN
      RCodegen.EnableDumpCode;
    ELSE
      gotFile := TRUE;
    END;
    INC(i);
  UNTIL gotFile;
  Parse.InitFromFile(fileName);
  Parse.ParseModule;
  l := Parse.l;

  Decls.VisitDecl(Parse.lastModuleDecls);
  p := Decls.reachableDecls;
  RCodegen.ReserveTypeinfos();
  WHILE p # NIL DO
    IF (p.d.kind = AST.declVar) & (p.d.nesting = 0) THEN
      RCodegen.AllocateGlobals(l, p.d);
    END;
    p := p.next
  END;
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF (p.d.kind = AST.declProcedure) & (p.d.nesting = 0) & ~p.d.isNative THEN
      RCodegen.GenerateProc(l, p.d);
    END;
    p := p.next
  END;
  RCodegen.GenStartMain;
  p := Decls.reachableDecls;
  WHILE p # NIL DO
    IF p.d.qname.name = Decls.modInitName THEN
      RCodegen.GenCall(p.d);
    END;
    p := p.next
  END;
  RCodegen.GenEndMain(l)
END CompileFile;

BEGIN
  CompileFile
END RCompiler.
