(*
 * This file is part of oberon-compiler
 *
 * Copyright (C) 2018-2025  Eric Scharff
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *)

MODULE StateMachine;

(* Use function pointers to model a state machine *)

IMPORT Out;

VAR
  state2TotalTime: INTEGER;
  updateFn: PROCEDURE (elapsedTime: INTEGER; event: INTEGER);

PROCEDURE Log(s: ARRAY OF CHAR; i, j: INTEGER);

  PROCEDURE LogS(varName, varVal: ARRAY OF CHAR);
  BEGIN
    Out.Str(varName);
    Out.Char("=");
    Out.Str(varVal);
  END LogS;

  PROCEDURE LogI(varName: ARRAY OF CHAR; varVal: INTEGER);
  BEGIN
    Out.Str(varName);
    Out.Char("=");
    Out.Int(varVal);
  END LogI;

BEGIN
  LogS("stateName", s);
  Out.Char(" ");
  LogI("elapsedTime", i);
  Out.Char(" ");
  LogI("event", j);
  Out.Char(" ");
  LogI("state2TotalTime", state2TotalTime);
  Out.Ln
END Log;

PROCEDURE StateEnd(elapsedTime: INTEGER; event: INTEGER);
BEGIN
  Log("StateEnd", elapsedTime, event);
END StateEnd;

PROCEDURE State4(elapsedTime: INTEGER; event: INTEGER);
BEGIN
  Log("State4", elapsedTime, event);
  IF event = 0 THEN
    updateFn := StateEnd
  END;
END State4;

PROCEDURE State3(elapsedTime: INTEGER; event: INTEGER);
BEGIN
  Log("State3", elapsedTime, event);
  IF event = 1 THEN
    updateFn := State4
  END;
END State3;

PROCEDURE State2(elapsedTime: INTEGER; event: INTEGER);
BEGIN
  Log("State2", elapsedTime, event);
  state2TotalTime := state2TotalTime + elapsedTime;
  IF state2TotalTime >= 100 THEN
    updateFn := State3
  END;
END State2;

PROCEDURE State1(elapsedTime: INTEGER; event: INTEGER);
BEGIN
  Log("State1", elapsedTime, event);
  IF event = 3 THEN
    updateFn := State2
  END;
END State1;

PROCEDURE Driver;
VAR
  i: INTEGER;
BEGIN
  state2TotalTime := 0;
  updateFn := State1;
  i := 0;
  WHILE updateFn # StateEnd DO
    updateFn(10, i);
    i := (i + 1) MOD 4
  END
END Driver;

BEGIN
  Driver
END StateMachine.
