MODULE ArrayTest;

IMPORT Out;

TYPE
  R = RECORD x, y: INTEGER END;
  AR = ARRAY 3 OF R;
  AR2 = ARRAY 7, 8 OF R;
  CharBuf = ARRAY 8 OF CHAR;
  Pool = RECORD cb: CharBuf; last: INTEGER END;

VAR
  flag: BOOLEAN;
  a: R;
  w1, w2: ARRAY 3 OF R;

PROCEDURE P(VAR b: BOOLEAN);
BEGIN
  Out.Int(ORD(b)); Out.Ln;
END P;

PROCEDURE RefTest(VAR a: INTEGER; z, z2: BOOLEAN; VAR z3: BOOLEAN; b: R);
BEGIN
  P(z);
  P(z2);
  P(z3);
  a := a + b.y;
  Out.Int(b.y); Out.Ln
END RefTest;

PROCEDURE Sum(as: ARRAY OF R);
VAR
  i, s: INTEGER;
BEGIN
  i := 0; s := 0;
  WHILE i < LEN(as) DO
    s := s + as[i].x;
    INC(i)
  END;
  Out.Int(s); Out.Ln
END Sum;

PROCEDURE TestAr;
VAR
  ar: AR;
BEGIN
  ar[0].x := 20;
  ar[1].x := 40;
  ar[2].x := 60;
  Sum(ar);
END TestAr;

PROCEDURE TestTwo;
VAR
  ar: AR2;
  i, j: INTEGER;
BEGIN
  i := 3; j := 3;
  ar[i, j].x := 33;
  Out.Int(ar[i, j].x); Out.Ln
END TestTwo;

PROCEDURE StringTest;
VAR
  h1, h2: ARRAY 8 OF CHAR;
BEGIN
  h1 := "Hello";
  h2 := "World";
  Out.Str(h1);
  Out.Str(h2);
  Out.Ln
END StringTest;

PROCEDURE ArrayOfStringTest;
VAR
  pool: ARRAY 4, 5 OF CHAR;
BEGIN
  pool[0] := "EF";
  pool[1] := "CD";
  pool[2] := "AB";
  Out.Str(pool[2]);
  Out.Str(pool[1]);
  Out.Str(pool[0]);
  Out.Ln
END ArrayOfStringTest;

PROCEDURE UpdateRecord(VAR p: Pool; s: ARRAY OF CHAR);
VAR i: INTEGER;
BEGIN
  i := 0;
  WHILE s[i] # 0X DO
    p.cb[p.last + i] := s[i];
    INC(i)
  END;
  p.cb[i] := 0X;
  p.last := i
END UpdateRecord;

PROCEDURE RecordTest;
VAR
  p: Pool;
BEGIN
  p.last := 0;
  UpdateRecord(p, "ABC");
  Out.Str(p.cb); Out.Char(" ");
  Out.Int(p.last); Out.Ln
END RecordTest;

PROCEDURE Copier(src: ARRAY OF CHAR);
VAR
  dest: ARRAY 8 OF CHAR;
BEGIN
  dest := src;
  Out.Str(dest); Out.Ln
END Copier;

PROCEDURE CopierTest;
BEGIN
  Out.Str("Copier test:"); Out.Ln;
  Copier("Hello");
  Copier("World");
  Copier("ABCDEFG");
END CopierTest;

PROCEDURE CounterOutput(a, b, c, d: INTEGER);
BEGIN
  Out.Int(a); Out.Str(" ");
  Out.Int(b); Out.Str(" ");
  Out.Int(c); Out.Str(" ");
  Out.Int(d); Out.Str(".");
  Out.Ln
END CounterOutput;

PROCEDURE CounterInfo(ia: ARRAY OF INTEGER): INTEGER;
BEGIN
  Out.Int(ia[0]); Out.Ln;
  RETURN 10 * LEN(ia)
END CounterInfo;

PROCEDURE CounterHelper(a, b, c: INTEGER; ia: ARRAY OF INTEGER);
BEGIN
  CounterOutput(a, b, c, CounterInfo(ia))
END CounterHelper;

PROCEDURE CounterTest;
VAR
  ia: ARRAY 4 OF INTEGER;
BEGIN
  ia[0] := 1;
  CounterHelper(10, 20, 30, ia);
  Out.Int(ia[0]); Out.Ln
END CounterTest;

PROCEDURE VarCounterInfo(VAR ia: ARRAY OF INTEGER): INTEGER;
BEGIN
  Out.Int(ia[0]); Out.Ln;
  RETURN 10 * LEN(ia)
END VarCounterInfo;

PROCEDURE VarCounterHelper(a, b, c: INTEGER; VAR ia: ARRAY OF INTEGER);
BEGIN
  CounterOutput(a, b, c, VarCounterInfo(ia))
END VarCounterHelper;

PROCEDURE VarCounterTest;
VAR
  ia: ARRAY 4 OF INTEGER;
BEGIN
  ia[0] := 1;
  VarCounterHelper(10, 20, 30, ia);
  Out.Int(ia[0]); Out.Ln
END VarCounterTest;

BEGIN
  flag := TRUE;
  w2[1].x := 1;
  w2[1].y := 2;
  w2[2].x := 3;
  w2[2].y := 4;
  Out.Str("Before copy"); Out.Ln;
  Out.Int(w1[1].x); Out.Int(w1[1].y); Out.Int(w1[2].x); Out.Int(w1[2].y); Out.Ln;
  (* Disabled because the C codegen doesn't support this:
  w1 := w2;
  *)
  Out.Str("After copy"); Out.Ln;
  Out.Int(w1[1].x); Out.Int(w1[1].y); Out.Int(w1[2].x); Out.Int(w1[2].y); Out.Ln;
  a.x := 1;
  a.y := 2;
  RefTest(a.y, a.x > a.y, flag, flag, a);
  Out.Int(a.y); Out.Ln;
  TestAr;
  TestTwo;
  StringTest;
  ArrayOfStringTest;
  RecordTest;
  CopierTest;
  CounterTest;
  VarCounterTest;
END ArrayTest.
