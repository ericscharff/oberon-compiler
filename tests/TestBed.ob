MODULE TestBed;

TYPE
  A = ARRAY 4 OF INTEGER;

PROCEDURE FieldTest;

TYPE
  R0 = RECORD x, y: INTEGER END;
  R1 = RECORD u: INTEGER;
         v: ARRAY 4 OF R0;
         w: INTEGER
       END;


VAR i, j, k: INTEGER;
  s: ARRAY 101 OF R1;

BEGIN
  s[100].u := 3;
  s[100].w := 4;
  s[100].v[2].x := 5;
  s[1].v[2].y := 6;
  s[1].w := 7;
  i := 100; j := 2;
  k := s[i].u;
  WriteInt(k);
  k := s[1].w;
  WriteInt(k);
  k := s[i].v[j].x;
  WriteInt(k);
  k := s[1].v[2].y;
  WriteInt(k);
  s[0].v[i].y := k;
  WriteInt(s[0].v[i].y)
END FieldTest;

PROCEDURE CondTest;

VAR
  a, b, c, d, e, f, g :INTEGER;
BEGIN
  a := 10; b := 10; c := 10; d := 10; e := 10; f := 10; g := 10;
  IF a > b THEN
    c := 100;
  END;
  IF (c > d) OR (e > f) THEN
    g := 200;
  END;
  IF (f > g) & (g > a) THEN
    b := 300;
  END;
  IF ((a > b) OR (c > d) OR (e > f)) &
     ((a < 10) OR (b < 20) OR (c < 30)) THEN
    c := 400;
  ELSIF ((a > b) & (c > d) & (e > f)) OR
     ((a < 10) & (b < 20) & (c < 30)) THEN
    c := 500;
  ELSE
    c := 600;
  END;
  a := 999;
  a := 1000
END CondTest;

PROCEDURE FuncTest;
VAR
  i, j, k :INTEGER;
  a :ARRAY 10 OF INTEGER;
  b :ARRAY 10 OF RECORD l :INTEGER; m :ARRAY 10 OF INTEGER END;

  PROCEDURE h(a :INTEGER; VAR x :INTEGER; b :INTEGER);
  BEGIN
    x := x * b + 10 + a
  END h;

  PROCEDURE g(x :INTEGER) :INTEGER;
  BEGIN
    RETURN x*7
  END g;

  PROCEDURE f(a, b, c :INTEGER) :INTEGER;
  VAR
    r :INTEGER;
  BEGIN
    r := g(a) + g(b) * g(c)
    RETURN r
  END f;

  PROCEDURE p(x :INTEGER; VAR y :INTEGER);
  BEGIN
    x := y;
    y := x;
    p(x, y);
    p(y, x);
  END p;

  PROCEDURE z(a :INTEGER; VAR b, c :INTEGER);
  BEGIN
    c := b + a
  END z;

BEGIN
  i := -1; j := -1; k := -1;
  f(0, 0, 0);
  i := f(1, 2, 3);
  i := f(g(1), g(2), g(g(3)));
  i := f(4, 5, 6);
  h(9, i, 10);
  p(i, i);
  z(i, a[3], k);
  z(i, a[j], k);
  z(i, b[j].m[j], k);
END FuncTest;

PROCEDURE Sum(a :A; b :INTEGER; c :A);
VAR
  i, s :INTEGER;
BEGIN
  i := 0; s := 0;
  WHILE i < 4 DO
    s := s + a[i] + b + c[i];
    i := i + 1
  END;
  WriteInt(s); WriteLn
END Sum;

PROCEDURE SumTest;
VAR
  a :A;
BEGIN
  a[0] := 1; a[1] := 2; a[2] := 3; a[3] := 4;
  Sum(a, 3, a)
END SumTest;

PROCEDURE ShortCircuitTest;
PROCEDURE C1(a, b :INTEGER);
BEGIN
  IF ((a > 10) & (b > 20)) THEN WriteInt(1) ELSE WriteInt(0) END;
  WriteLn;
END C1;
PROCEDURE C2(a, b :INTEGER);
BEGIN
  IF (~((a > 10) & (b > 20))) THEN WriteInt(1) ELSE WriteInt(0) END;
  WriteLn;
END C2;
BEGIN
  C1(3, 4);
  C1(3, 40);
  C1(30, 4);
  C1(30, 40);
  WriteLn;
  C2(3, 4);
  C2(3, 40);
  C2(30, 4);
  C2(30, 40);
END ShortCircuitTest;

PROCEDURE IsIOne(i :INTEGER) :BOOLEAN;
BEGIN
  RETURN i = 1
END IsIOne;

PROCEDURE IsITwo(i :INTEGER) :BOOLEAN;
BEGIN
  RETURN i = 2
END IsITwo;

PROCEDURE IsIThree(i :INTEGER) :BOOLEAN;
BEGIN
  RETURN i = 3
END IsIThree;

PROCEDURE BoolTest(i :INTEGER) :BOOLEAN;
BEGIN
  RETURN IsIOne(i) OR IsITwo(i) OR IsIThree(i)
END BoolTest;

PROCEDURE BoolReturnValTest;
BEGIN
  IF BoolTest(0) THEN WriteInt(1) ELSE WriteInt(2) END; WriteLn;
  IF BoolTest(1) THEN WriteInt(1) ELSE WriteInt(2) END; WriteLn;
  IF BoolTest(2) THEN WriteInt(1) ELSE WriteInt(2) END; WriteLn;
  IF BoolTest(3) THEN WriteInt(1) ELSE WriteInt(2) END; WriteLn;
  IF BoolTest(4) THEN WriteInt(1) ELSE WriteInt(2) END; WriteLn;
END BoolReturnValTest;

BEGIN
  IF FALSE THEN
    FieldTest;
    CondTest;
    FuncTest
  END;
  SumTest;
  ShortCircuitTest;
  BoolReturnValTest;
END TestBed.
