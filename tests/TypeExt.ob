MODULE TypeExt;

IMPORT Out;

TYPE
  PR1 = POINTER TO R1;
  PR2 = POINTER TO R2;
  PR3 = POINTER TO R3;
  PR4 = POINTER TO R4;
  PS1 = POINTER TO S1;
  R1 = RECORD a: INTEGER END;
  S1 = RECORD s: INTEGER; END;
  R2 = RECORD (R1) b: INTEGER END;
  R3 = RECORD (R2) c: INTEGER END;
  R4 = RECORD (R3) d: INTEGER END;

PROCEDURE tf(b: BOOLEAN);
BEGIN
  IF b THEN
    Out.PrintLn("TRUE");
  ELSE
    Out.PrintLn("FALSE");
  END;
END tf;

PROCEDURE BasePtrTypes(a, b, c, d: PR1);
BEGIN
  Out.PrintLn("R1");
  tf(a IS PR1);
  tf(a IS PR2);
  tf(a IS PR3);
  tf(a IS PR4);
  Out.PrintLn("R2");
  tf(b IS PR1);
  tf(b IS PR2);
  tf(b IS PR3);
  tf(b IS PR4);
  Out.PrintLn("R3");
  tf(c IS PR1);
  tf(c IS PR2);
  tf(c IS PR3);
  tf(c IS PR4);
  Out.PrintLn("R4");
  tf(d IS PR1);
  tf(d IS PR2);
  tf(d IS PR3);
  tf(d IS PR4);
END BasePtrTypes;

PROCEDURE BaseTypes(VAR a, b, c, d: R1; s: S1);
VAR
  sum: INTEGER;
BEGIN
  sum := a.a + b.a + c.a + d.a;
  Out.Int(sum); Out.Ln;
  Out.PrintLn("R1");
  tf(a IS R1);
  tf(a IS R2);
  tf(a IS R3);
  tf(a IS R4);
  Out.PrintLn("R2");
  tf(b IS R1);
  tf(b IS R2);
  tf(b IS R3);
  tf(b IS R4);
  Out.PrintLn("R3");
  tf(c IS R1);
  tf(c IS R2);
  tf(c IS R3);
  tf(c IS R4);
  Out.PrintLn("R4");
  tf(d IS R1);
  tf(d IS R2);
  tf(d IS R3);
  tf(d IS R4);
  a.a := s.s;
END BaseTypes;

PROCEDURE BaseTypes1(VAR a, b, c, d: R1; s: S1);
BEGIN
  BaseTypes(a, b, c, d, s)
END BaseTypes1;

PROCEDURE TypeExtTest;
VAR
  vr1: R1;
  vr2: R2;
  vr3: R3;
  vr4: R4;
  s1:  S1;
  pvr1: PR1;
  pvr2: PR2;
  pvr3: PR3;
  pvr4: PR4;
BEGIN
  vr1.a := 10; vr2.a := 10; vr3.a := 10; vr4.a := 10;
  BaseTypes1(vr1, vr2, vr3, vr4, s1);
  NEW(pvr1); NEW(pvr2); NEW(pvr3); NEW(pvr4);
  BasePtrTypes(pvr1, pvr2, pvr3, pvr4);
END TypeExtTest;

BEGIN
  TypeExtTest
END TypeExt.
