MODULE Sudoku;

(**
 * Generates valid Sudoku boards. The random number generator depends on an
 * internal table of random bits to make it self contained. Demonstrates
 * use of the SET type (to keep track of which numbers are possible for which
 * cells) as well as ARRAYs of SETs.
 *)

IMPORT Out;

VAR
  BITS: ARRAY 256 OF INTEGER; (* 256 random 8-bit values *)
  nextBit: INTEGER;           (* Next entry to read      *)
  BOXES: ARRAY 9 OF INTEGER;
  board: ARRAY 81 OF INTEGER;

PROCEDURE InitTables;
BEGIN
  BITS[0]   := 0A0H; BITS[1]   := 065H; BITS[2]   := 09EH; BITS[3]   := 059H;
  BITS[4]   := 05EH; BITS[5]   := 05AH; BITS[6]   := 02EH; BITS[7]   := 0A3H;
  BITS[8]   := 02EH; BITS[9]   := 0ABH; BITS[10]  := 0E6H; BITS[11]  := 021H;
  BITS[12]  := 00BH; BITS[13]  := 033H; BITS[14]  := 060H; BITS[15]  := 00CH;
  BITS[16]  := 068H; BITS[17]  := 0B7H; BITS[18]  := 0C9H; BITS[19]  := 0CCH;
  BITS[20]  := 076H; BITS[21]  := 0B3H; BITS[22]  := 0C8H; BITS[23]  := 01CH;
  BITS[24]  := 0FDH; BITS[25]  := 020H; BITS[26]  := 060H; BITS[27]  := 0A3H;
  BITS[28]  := 004H; BITS[29]  := 0EBH; BITS[30]  := 038H; BITS[31]  := 05AH;
  BITS[32]  := 096H; BITS[33]  := 0FFH; BITS[34]  := 048H; BITS[35]  := 003H;
  BITS[36]  := 07DH; BITS[37]  := 09BH; BITS[38]  := 0F0H; BITS[39]  := 0A8H;
  BITS[40]  := 0C4H; BITS[41]  := 09CH; BITS[42]  := 0EFH; BITS[43]  := 068H;
  BITS[44]  := 007H; BITS[45]  := 041H; BITS[46]  := 07DH; BITS[47]  := 09CH;
  BITS[48]  := 0D7H; BITS[49]  := 00EH; BITS[50]  := 0CEH; BITS[51]  := 086H;
  BITS[52]  := 025H; BITS[53]  := 06AH; BITS[54]  := 0D4H; BITS[55]  := 061H;
  BITS[56]  := 0CCH; BITS[57]  := 0AAH; BITS[58]  := 083H; BITS[59]  := 0FDH;
  BITS[60]  := 0CAH; BITS[61]  := 055H; BITS[62]  := 06BH; BITS[63]  := 0A6H;
  BITS[64]  := 08FH; BITS[65]  := 089H; BITS[66]  := 031H; BITS[67]  := 00AH;
  BITS[68]  := 01FH; BITS[69]  := 055H; BITS[70]  := 042H; BITS[71]  := 019H;
  BITS[72]  := 06AH; BITS[73]  := 0F4H; BITS[74]  := 05CH; BITS[75]  := 021H;
  BITS[76]  := 0D9H; BITS[77]  := 09DH; BITS[78]  := 099H; BITS[79]  := 048H;
  BITS[80]  := 035H; BITS[81]  := 036H; BITS[82]  := 039H; BITS[83]  := 0C0H;
  BITS[84]  := 0FAH; BITS[85]  := 017H; BITS[86]  := 013H; BITS[87]  := 09DH;
  BITS[88]  := 06BH; BITS[89]  := 0EFH; BITS[90]  := 081H; BITS[91]  := 035H;
  BITS[92]  := 0E9H; BITS[93]  := 05CH; BITS[94]  := 0FEH; BITS[95]  := 0D4H;
  BITS[96]  := 035H; BITS[97]  := 0E4H; BITS[98]  := 0A9H; BITS[99]  := 06EH;
  BITS[100] := 04FH; BITS[101] := 053H; BITS[102] := 0B2H; BITS[103] := 03BH;
  BITS[104] := 00AH; BITS[105] := 095H; BITS[106] := 0F7H; BITS[107] := 021H;
  BITS[108] := 0D7H; BITS[109] := 092H; BITS[110] := 007H; BITS[111] := 0CDH;
  BITS[112] := 042H; BITS[113] := 0D5H; BITS[114] := 07FH; BITS[115] := 02BH;
  BITS[116] := 096H; BITS[117] := 060H; BITS[118] := 096H; BITS[119] := 099H;
  BITS[120] := 004H; BITS[121] := 039H; BITS[122] := 034H; BITS[123] := 007H;
  BITS[124] := 0A6H; BITS[125] := 054H; BITS[126] := 065H; BITS[127] := 074H;
  BITS[128] := 0A4H; BITS[129] := 058H; BITS[130] := 0A3H; BITS[131] := 0B4H;
  BITS[132] := 063H; BITS[133] := 06AH; BITS[134] := 01AH; BITS[135] := 0BEH;
  BITS[136] := 0CEH; BITS[137] := 011H; BITS[138] := 0C8H; BITS[139] := 063H;
  BITS[140] := 07DH; BITS[141] := 00DH; BITS[142] := 07FH; BITS[143] := 03CH;
  BITS[144] := 091H; BITS[145] := 0B8H; BITS[146] := 057H; BITS[147] := 053H;
  BITS[148] := 054H; BITS[149] := 0F6H; BITS[150] := 091H; BITS[151] := 062H;
  BITS[152] := 080H; BITS[153] := 079H; BITS[154] := 015H; BITS[155] := 032H;
  BITS[156] := 0B3H; BITS[157] := 0EDH; BITS[158] := 099H; BITS[159] := 093H;
  BITS[160] := 0B8H; BITS[161] := 003H; BITS[162] := 0CBH; BITS[163] := 008H;
  BITS[164] := 042H; BITS[165] := 05EH; BITS[166] := 02BH; BITS[167] := 03CH;
  BITS[168] := 05CH; BITS[169] := 0D7H; BITS[170] := 062H; BITS[171] := 08FH;
  BITS[172] := 015H; BITS[173] := 0BEH; BITS[174] := 0C1H; BITS[175] := 01DH;
  BITS[176] := 08EH; BITS[177] := 0BAH; BITS[178] := 0FAH; BITS[179] := 010H;
  BITS[180] := 0FAH; BITS[181] := 067H; BITS[182] := 0D5H; BITS[183] := 04DH;
  BITS[184] := 023H; BITS[185] := 02AH; BITS[186] := 057H; BITS[187] := 0F1H;
  BITS[188] := 057H; BITS[189] := 01AH; BITS[190] := 040H; BITS[191] := 0B2H;
  BITS[192] := 044H; BITS[193] := 0E7H; BITS[194] := 0CBH; BITS[195] := 0C2H;
  BITS[196] := 086H; BITS[197] := 05BH; BITS[198] := 01AH; BITS[199] := 07AH;
  BITS[200] := 0F6H; BITS[201] := 0F6H; BITS[202] := 072H; BITS[203] := 002H;
  BITS[204] := 03CH; BITS[205] := 01CH; BITS[206] := 0A4H; BITS[207] := 0AEH;
  BITS[208] := 05DH; BITS[209] := 0B6H; BITS[210] := 000H; BITS[211] := 0D7H;
  BITS[212] := 062H; BITS[213] := 009H; BITS[214] := 04FH; BITS[215] := 0C1H;
  BITS[216] := 0CDH; BITS[217] := 063H; BITS[218] := 061H; BITS[219] := 026H;
  BITS[220] := 047H; BITS[221] := 0F7H; BITS[222] := 060H; BITS[223] := 072H;
  BITS[224] := 00FH; BITS[225] := 01EH; BITS[226] := 0A2H; BITS[227] := 0F2H;
  BITS[228] := 087H; BITS[229] := 0A3H; BITS[230] := 087H; BITS[231] := 008H;
  BITS[232] := 062H; BITS[233] := 0DDH; BITS[234] := 065H; BITS[235] := 0CBH;
  BITS[236] := 034H; BITS[237] := 0CBH; BITS[238] := 0D3H; BITS[239] := 0D0H;
  BITS[240] := 037H; BITS[241] := 002H; BITS[242] := 010H; BITS[243] := 067H;
  BITS[244] := 0DEH; BITS[245] := 0D0H; BITS[246] := 06EH; BITS[247] := 07FH;
  BITS[248] := 043H; BITS[249] := 0F4H; BITS[250] := 067H; BITS[251] := 05BH;
  BITS[252] := 09EH; BITS[253] := 0CBH; BITS[254] := 0EEH; BITS[255] := 0D2H;

  BOXES[0] := 0;
  BOXES[1] := 3;
  BOXES[2] := 6;
  BOXES[3] := 27;
  BOXES[4] := 30;
  BOXES[5] := 33;
  BOXES[6] := 54;
  BOXES[7] := 57;
  BOXES[8] := 60;
END InitTables;

PROCEDURE ValidRowOrColumn(start, stride: INTEGER): BOOLEAN;
  (* Determine if a row (or column only has the digits 1..9.   *)
  (* start is the starting board cell to search. Stride is 1   *)
  (* to search the next cell (row), or 9 for searchng columns. *)
VAR
  used: SET;
  idx, i, b: INTEGER;
BEGIN
  idx := start;
  used := {};
  FOR i := 0 TO 8 DO
    b := board[idx];
    idx := idx + stride;
    IF (b # 0) & (b IN used) THEN
      (* already used, done *)
      RETURN FALSE
    ELSE
      used := used + {b};
    END
  END
  RETURN TRUE
END ValidRowOrColumn;

PROCEDURE ValidBox(start: INTEGER): BOOLEAN;
VAR
  used: SET;
  i, j, b: INTEGER;
BEGIN
  used := {};
  FOR i := 0 TO 2 DO
    FOR j := 0 TO 2 DO
      b := board[start + i*9 + j];
      IF (b # 0) & (b in used) THEN
        RETURN FALSE
      ELSE
        used := used + {b}
      END
    END
  END
  RETURN TRUE
END ValidBox;

PROCEDURE Valid():BOOLEAN;
VAR
  i: INTEGER;
BEGIN
  (* Non local return would be helpful here *)
  FOR i := 0 TO 8 DO
    IF ~ValidRowOrColumn(i*9, 1) THEN RETURN FALSE END;
    IF ~ValidRowOrColumn(i, 9) THEN RETURN FALSE END;
    IF ~ValidBox(BOXES[i]) THEN RETURN FALSE END;
  END;
  RETURN TRUE
END Valid;

PROCEDURE NumberOfOneBits(s: SET): INTEGER;
(* Counts 1 bits in a set. Note that because Sudoku only needs the *)
(* number 1..9, those aree the only ones checked. *)
VAR
  a, i: INTEGER;
BEGIN
  a := 0;
  FOR i := 1 TO 9 DO
    IF i in s THEN INC(a) END
  END
  RETURN a
END NumberOfOneBits;

PROCEDURE RandomInt(max: INTEGER): INTEGER;
  (* return [0, max) *)
VAR
  r: INTEGER;
BEGIN
  REPEAT
    r := BITS[nextBit] BITAND 0FH;
    nextBit := (nextBit + 1) BITAND 0FFH;
  UNTIL r < max
  RETURN r
END RandomInt;

PROCEDURE NthSetBit(s: SET; n: INTEGER): INTEGER;
(* Returns the index of the nth slement of s that is set. *)
VAR elt: INTEGER;
BEGIN
  elt := -1;
  WHILE n > 0 DO
    INC(elt);
    IF elt in s THEN DEC(n) END;
  END
  RETURN elt
END NthSetBit;

PROCEDURE RandomEltFromCandidates(candidates: SET): INTEGER;
VAR n, r: INTEGER;
BEGIN
  n := NumberOfOneBits(candidates);
  r := RandomInt(n) + 1;
  RETURN NthSetBit(candidates, r)
END RandomEltFromCandidates;

PROCEDURE MakeBoard;
VAR
  i: INTEGER;
  e: INTEGER;
  stk: ARRAY 81 OF SET;
  stkTop: INTEGER;
  candidates: SET;
  c: INTEGER;
BEGIN
  FOR i := 0 TO 80 DO board[i] := 0 END;
  e := 0;
  stkTop := 0;
  candidates := { 1 .. 9 };
  WHILE (e < 81) & (candidates # {}) DO
    c := RandomEltFromCandidates(candidates);
    candidates := candidates - {c};
    board[e] := c;
    IF Valid() THEN
      INC(e);
      IF e < 81 THEN
        stk[stkTop] := candidates;
        INC(stkTop);
        candidates := {1 .. 9}
      END
    END;
    WHILE candidates = {} DO
      (* Backtrack *)
      board[e] := 0;
      DEC(e);
      DEC(stkTop);
      candidates := stk[stkTop]
    END
  END
END MakeBoard;

PROCEDURE PrintBoard;
VAR
  i, j: INTEGER;
BEGIN
  FOR i := 0 TO 8 DO
    FOR j := 0 TO 8 DO
      Out.Int(board[i*9+j]); Out.Char(" ");
      IF (j = 2) OR (j = 5) THEN Out.Str("| ") END;
    END;
    Out.Ln;
    IF (i = 2) OR (i = 5) THEN
      Out.Str("------+-------+-------");
      Out.Ln
    END;
  END
END PrintBoard;

BEGIN
  InitTables;
  MakeBoard;
  PrintBoard;
END Sudoku.
