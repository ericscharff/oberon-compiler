(*
 * This file is part of oberon-compiler
 *
 * Copyright (C) 2018-2025  Eric Scharff
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *)

MODULE KnightsTour;

IMPORT Out;

(*
  Produce a Knights tour by a brute force recursive descent technique. The
  board is represented as a two-dimensional array of INTEGER, where a square
  that has yet to be visited has a value of -1, otherwise the number is the
  sequence (the first visited square is 0, second is 1, and so on.

  This works for small boards and starting in the corner. On larger boards,
  this will likely work but be painfully slow.

  A knight can make eight moves, each represented in the array moves.
  For example, the second entry is 1 over and 2 down.
*)
CONST
  W = 6; (* Change to 8 for a real chessboard, but slower *)
  H = 6; (* Change to 8 for a real chessboard, but slower *)

TYPE
  Point = RECORD x, y: INTEGER END;

VAR
  board: ARRAY H, W OF INTEGER;
  moves: ARRAY 8 OF Point;

PROCEDURE Setup;
VAR i, j: INTEGER;
BEGIN
  FOR i := 0 TO H-1 DO
    FOR j := 0 TO W-1 DO
      board[i][j] := -1
    END
  END;
  moves[0].x := 2; moves[0].y := 1; moves[1].x := 1; moves[1].y := 2;
  moves[2].x := -1; moves[2].y := 2; moves[3].x := -2; moves[3].y := 1;
  moves[4].x := -2; moves[4].y := -1; moves[5].x := -1; moves[5].y := -2;
  moves[6].x := 1; moves[6].y := -2; moves[7].x := 2; moves[7].y := -1;
END Setup;

PROCEDURE Solve(curX, curY, curMove: INTEGER): BOOLEAN;
VAR
  done: BOOLEAN;
  move, newX, newY: INTEGER;
BEGIN
  IF curMove = W*H THEN
    done := TRUE
  ELSE
    done := FALSE;
    move := 0;
    WHILE (~done) & (move < 8) DO
      newX := curX + moves[move].x;
      newY := curY + moves[move].y;
      IF ((newX >= 0) & (newX < W) & (newY >= 0) & (newY < H) &
        (board[newY][newX] = -1)) THEN
        board[newY][newX] := curMove;
        IF Solve(newX, newY, curMove+1) THEN
          done := TRUE
        ELSE
          board[newY][newX] := -1
        END
      END;
      INC(move)
    END
  END;
  RETURN done
END Solve;

PROCEDURE PrintBoard;
VAR x, y: INTEGER;
BEGIN
  FOR y := 0 TO H-1 DO
    FOR x := 0 TO W-1 DO
      Out.Int(board[y, x]); Out.Char(9X)
    END;
    Out.Ln;
  END;
END PrintBoard;

BEGIN
  Setup;
  board[0, 0] := 0;
  Solve(0, 0, 1);
  PrintBoard;
END KnightsTour.
