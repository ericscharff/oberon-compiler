MODULE Sound;

IMPORT Out;

CONST
  SR = 20.0; (* Sampling Rate *)
  Freq = 3.0;  (* Frequency, in Hertz *)

  (* Note Frequencies *)
  C4 = 261.63;
  D4 = 293.66;
  E4 = 329.63;
  F4 = 349.23;
  G4 = 392.00;
  A4 = 440.00;
  B4 = 493.88;

(* Scale [-1.0, 1.0) to [0, 255] *)
PROCEDURE Scale(x: REAL): INTEGER;
BEGIN
  IF x < -1.0 THEN RETURN 0 END;
  IF x >= 1.0 THEN RETURN 255 END;
  RETURN FLOOR(x * 128.0 + 128.0)
END Scale;

(* Ractional part of x *)
PROCEDURE Frac(x: REAL): REAL;
BEGIN
  RETURN x - FLT(FLOOR(x))
END Frac;

PROCEDURE SquareWave(x: REAL): REAL;
VAR r: REAL;
BEGIN
  r := 1.0;
  IF x >= 0.5 THEN r := -1.0 END
  RETURN r
END SquareWave;

PROCEDURE SawtoothWave(x: REAL): REAL;
BEGIN
  RETURN 2.0 * x - 1.0
END SawtoothWave;

PROCEDURE TriangleWave(x: REAL): REAL;
VAR r: REAL;
BEGIN
  r := 1.0 - 4.0 * x;
  IF x >= 0.5 THEN r := 4.0 * x - 3.0 END;
  RETURN r
END TriangleWave;

PROCEDURE TestWaves;
VAR
  t: INTEGER;
  x: REAL;
BEGIN
  Out.Str("t Square Sawtooth Triangle"); Out.Ln;
  FOR t := 0 TO 400 DO
    x := Frac(FLT(t)*Freq / SR);
    Out.Int(t); Out.Char(" ");
    Out.Real(SquareWave(x)); Out.Char(" ");
    Out.Real(SawtoothWave(x)); Out.Char(" ");
    Out.Real(TriangleWave(x));
    Out.Ln
  END
END TestWaves;

PROCEDURE MakeA440;
VAR
  t: INTEGER;
  x: REAL;
BEGIN
  (* To convert to WAV:
   * $ ../build/compile Sound.ob
   * $ ../build/out.prg > a.raw
   * $ sox -t raw -c 1 -b 8 -e unsigned -r 8k a.raw a.wav
   *)

  (* Three seconds at 8k *)
  FOR t := 0 to 24000 DO
    x := Frac(FLT(t) * A4 / 8000.0);
    Out.Char(CHR(Scale(SawtoothWave(x))))
  END;
  FOR t := 0 to 4000 DO
    Out.Char(CHR(128))
  END;
  FOR t := 0 to 24000 DO
    x := Frac(FLT(t) * A4 / 8000.0);
    Out.Char(CHR(Scale(SquareWave(x))))
  END;
  FOR t := 0 to 4000 DO
    Out.Char(CHR(128))
  END;
  FOR t := 0 to 24000 DO
    x := Frac(FLT(t) * A4 / 8000.0);
    Out.Char(CHR(Scale(TriangleWave(x))))
  END
END MakeA440;

PROCEDURE MajorScale;
  PROCEDURE Note(freq: REAL);
  VAR t: INTEGER; x: REAL;
  BEGIN
    FOR t := 0 to 4000 DO
      x := Frac(FLT(t) * freq / 8000.0);
      Out.Char(CHR(Scale(SquareWave(x))))
    END;
    FOR t := 0 to 1000 DO
      Out.Char(CHR(128))
    END
  END Note;

  PROCEDURE Sequence(s: ARRAY OF CHAR);
  VAR i: INTEGER; c: CHAR; notes: ARRAY 8 OF REAL;
  BEGIN
    notes[0] := A4;
    notes[1] := B4;
    notes[2] := C4;
    notes[3] := D4;
    notes[4] := E4;
    notes[5] := F4;
    notes[6] := G4;
    i := 0;
    WHILE i < LEN(s) DO
      c := s[i];
      IF (c >= "A") & (c <= "G") THEN
        IF s[i+1] = "," THEN
          (* Low C through B *)
          Note(notes[ORD(c) - ORD("A")] / 2.0);
        ELSE
          (* Middle C through B *)
          Note(notes[ORD(c) - ORD("A")]);
        END;
      ELSIF (c >= "a") & (c <= "g") THEN
        IF s[i+1] = "'" THEN
          (* Octave above high C through B *)
          Note(notes[ORD(c) - ORD("A")] * 4.0);
        ELSE
          (* High C through B *)
          Note(2.0 * notes[ORD(c) - ORD("a")]);
        END;
      END;
      INC(i);
    END; 
  END Sequence;
BEGIN
  Sequence("C, D, E, F, G, A, B, C D E F G A B c d e f g a b c'")
END MajorScale;

BEGIN
  TestWaves
(*  MakeA440 *)
(*  MajorScale *)
END Sound.
