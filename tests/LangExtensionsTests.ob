MODULE LangExtensionsTest;

(* Examples using laguage extensions *)

IMPORT Out;

CONST
  Seven = 7;

TYPE
  IntBuf = ARRAY * OF INTEGER;
  RecBuf = RECORD z: INTEGER; b: ARRAY * OF INTEGER END;
  NatBuf = RECORD _nat: NATIVE INTEGER END;
  CallbackFunc = PROCEDURE (i: INTEGER);

PROCEDURE FactIter*(n: INTEGER): INTEGER;
BEGIN
  VAR i := 1;
  VAR r := 1;
  WHILE i <= n DO
    r := r * i;
    INC(i)
  END;
  RETURN r
END FactIter;

PROCEDURE FactRec*(n: INTEGER): INTEGER;
VAR r: INTEGER;
BEGIN
  IF n <= 1 THEN
    r := 1
  ELSE
    r := n * FactRec(n-1)
  END;
  RETURN r
END FactRec;

PROCEDURE FibIter*(n: INTEGER): INTEGER;
BEGIN
  VAR prev := 1;
  VAR fib := 1;
  VAR newPrev := -1;
  WHILE n > 1 DO
    newPrev := fib;
    fib := fib + prev;
    prev := newPrev;
    DEC(n)
  END
  RETURN fib
END FibIter;

PROCEDURE FibRec*(n: INTEGER): INTEGER;
VAR r: INTEGER;
BEGIN
  IF n < 2 THEN
    r := 1
  ELSE
    r := FibRec(n-1) + FibRec(n-2)
  END
  RETURN r
END FibRec;

PROCEDURE TestFib;
VAR
  n: INTEGER;
BEGIN
  n := 7;
  ASSERT(FactRec(n) = FactIter(n));
  ASSERT(FactIter(Seven) = FactIter(n));
  ASSERT(FactIter(7) = 5040);
  Out.Int(FactRec(n)); Out.Ln;
  ASSERT(FibIter(20) = FibRec(20));
  ASSERT(FibRec(20) = 10946);
  Out.Int(FibIter(20)); Out.Ln;
END TestFib;

PROCEDURE DumpBuffer(b: ARRAY OF INTEGER);
VAR
  i: INTEGER;
BEGIN
  i := 0;
  WHILE i < LEN(b) DO
    Out.Int(b[i]); Out.Str(9X);
    INC(i)
  END;
  Out.Ln
END DumpBuffer;

PROCEDURE AddToBuf(VAR b: IntBuf; val: INTEGER);
BEGIN
  PUSH(b, val)
END AddToBuf;

NATIVE (-9000) PROCEDURE SetNativeVal(r: NatBuf; v: INTEGER); END SetNativeVal;
NATIVE (-9001) PROCEDURE CallNative(r: NatBuf); END CallNative;
NATIVE (-9002) PROCEDURE NativeCallback(i: INTEGER; func: CallbackFunc); END NativeCallback;

PROCEDURE MyCallback(i: INTEGER);
BEGIN
  Out.Str("Called back from native with i="); Out.Int(i); Out.Ln
END MyCallback;

PROCEDURE TestNativeCode;
VAR
  r: NatBuf;
BEGIN
  NativeCallback(10, MyCallback);
  SetNativeVal(r, 81);
  CallNative(r)
END TestNativeCode;

PROCEDURE TestBuffers;
VAR
  b:  ARRAY * OF INTEGER;
  b2: IntBuf;
  i:  INTEGER;
  r:  RecBuf;
BEGIN
  INIT(b, 4);
  FOR i := 1 TO 20 DO
    PUSH(b, i*5)
  END;
  DumpBuffer(b);
  INIT(b2, 4);
  FOR i := 1 TO 20 DO
    AddToBuf(b2, i*5);
  END;
  DumpBuffer(b2);
  INIT(r.b, 400);
  FOR i := 1 TO 20 DO
    PUSH(r.b, i*5)
  END;
  DumpBuffer(r.b);
  FOR i := 0 TO 19 DO
    ASSERT(b[i] = b2[i]);
    ASSERT(b2[i] = r.b[i]);
    ASSERT(r.b[i] = (i+1)*5);
  END;
END TestBuffers;

PROCEDURE TestBitops;
VAR
  i, j: INTEGER;
BEGIN
  i := 2;
  j := 3;
  ASSERT(i BITAND j = 2);
  ASSERT(i BITOR j = 3);
  ASSERT(i BITXOR j = 1);
END TestBitops;

PROCEDURE RunTests*;
BEGIN
  TestNativeCode;
  TestBuffers;
  TestBitops;
  TestFib
END RunTests;

BEGIN
  RunTests
END LangExtensionsTest.
