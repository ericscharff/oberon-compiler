(* StrCopy source code *)
MODULE StrCopy;

IMPORT Texts, Oberon;

VAR W: Texts.Writer;

PROCEDURE P(src :ARRAY OF CHAR);
VAR
  dest :ARRAY 8 OF CHAR;
BEGIN
  dest := src;
  Texts.WriteString(W, dest); Texts.WriteLn(W);
END P;

PROCEDURE Runner*;
BEGIN
  Texts.Append(Oberon.Log, W.buf);
  P("Hello");
  P("World");
  P("ABCDEFG");
END Runner;

BEGIN
  Texts.OpenWriter(W);
  Runner
END StrCopy.

(* StrCopy disassembled from Project Oberon *)
(* $ ../norebo ORTool.DecObj StrCopy.rsc *)
ORTool 18.2.2013
decode StrCopy.rsc
StrCopy D633A923   1   380
imports:
        Texts DEE8E9C5
        Fonts F4C9F557
        Files 6AFF6FA9
        Oberon 62B01F49
type descriptors

data    32
strings
Hello|||World|||ABCDEFG|
code
; PROCEDURE P(s :ARRAY OF CHAR);
; R0 = s (pointer to start of string)
; R1 = LEN(s) length of string, including the null-terminating byte
  x :ARRAY 8 OF CHAR;
; stack space = size of x (8 bytes) + R0 (4 bytes) + R1 (4 bytes) + lnk (4 bytes)
   0     4EE90014       SUB SP SP 20    ; Reserve stack space
   1     AFE00000       STR LNK SP 0    ; SP+0 = Return address
   2     A0E00004       STR R0 SP 4     ; SP+4 = src
   3     A1E00008       STR R1 SP 8     ; SP+8 = LEN(src)
   4     40E8000C       ADD R0 SP 12    ; R0 = address of dest
   5     81E00004       LDR R1 SP 4     ; R1 = src
   6     82E00008       LDR R2 SP 8     ; R2 = LEN(src)
   7     E100000B       BEQ 11          ;
   8     42280003       ADD R2 R2 3     ; rounding to multiple of 4, R2 = R2+3
   9     42220002       ASR R2 R2 2     ; R2 = R2 >> 2 (size of src in words, size)
  10     43000002       MOV R3 R0 2     ; R3 = 2 (which is the static size of dest, 2 words)
  11     03290003       SUB R3 R2 R3    ; R3 = size(src) (words) - size(dest) (words)
  12     DE01593C       BLGT  MT        ; if out of bounds (LEN(src) > LEN(dest)), TRAP
  13     83100000       LDR R3 R1 0     ; R3 = Mem[R1+0] (current word of src)
  14     41180004       ADD R1 R1 4     ; R1 = R1 + 4 (advance src pointer)
  15     A3000000       STR R3 R0 0     ; Copy word Mem[R0+0] = R3
  16     40080004       ADD R0 R0 4     ; R0 = R0 + 4 (advance dest pointer)
  17     42290001       SUB R2 R2 1     ; R2 = R2 - 1 (processed 1 word)
  18     E9FFFFFA       BNE -6          ; if not done, jump back to 13
  19     8D000013       LDR SB R0 19
  20     40D80000       ADD R0 SB 0
  21     8D100002       LDR SB R1 2
  22     41D80005       ADD R1 SB 5
  23     42E8000C       ADD R2 SP 12
  24     43000008       MOV R3 R0 8
  25     F711D019       BL 118809
  26     8D000005       LDR SB R0 5
  27     40D80000       ADD R0 SB 0
  28     8D100002       LDR SB R1 2
  29     41D80005       ADD R1 SB 5
  30     F711C005       BL 114693
  31     8FE00000       LDR LNK SP 0
  32     4EE80014       ADD SP SP 20
  33     C700000F       B LNK


; PROCEDURE Runner*;
  34     4EE90004       SUB SP SP 4
  35     AFE00000       STR LNK SP 0
  36     8D400008       LDR SB R4 8
  37     80D00004       LDR R0 SB 4
  38     8D000002       LDR SB R0 2
  39     81D00000       LDR R1 SB 0
  40     F710E00A       BL 57354        ; Call Texts.Append
  41     8D000003       LDR SB R0 3
  42     40D80020       ADD R0 SB 32    ; R0 = address of string
  43     41000006       MOV R1 R0 6     ; R1 = length 6 = "Hello" + null byte
  44     F7FFFFD3       BL -45          ; call P("Hello");
  45     8D000004       LDR SB R0 4
  46     40D80028       ADD R0 SB 40    ; R0 = address of string
  47     41000006       MOV R1 R0 6     ; R1 = length 6 = "World" + null byte
  48     F7FFFFCF       BL -49          ; call P("World");
  49     8D000004       LDR SB R0 4
  50     40D80030       ADD R0 SB 48    ; R0 = address of string
  51     41000008       MOV R1 R0 8     ; R1 = length 8 = "ABCDEFG" + null byte
  52     F7FFFFCB       BL -53          ; call P("ABCDEFG");
  53     8FE00000       LDR LNK SP 0
  54     4EE80004       ADD SP SP 4
  55     C700000F       B LNK

begin init
  56     4EE90004       SUB SP SP 4
  57     AFE00000       STR LNK SP 0
  58     8D000009       LDR SB R0 9
  59     40D80000       ADD R0 SB 0
  60     8D100002       LDR SB R1 2
  61     41D80005       ADD R1 SB 5
  62     F7117016       BL 94230
  63     F7FFFFE2       BL -30
  64     8FE00000       LDR LNK SP 0
  65     4EE80004       ADD SP SP 4
  66     C700000F       B LNK
commands:
        Runner  136
entries
   224   136
pointer refs
     0     4    24
fixP =       62
fixD =       60
fixT =        0
entry =      224
