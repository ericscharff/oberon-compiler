(*
 * This file is part of oberon-compiler
 *
 * Copyright (C) 2018-2023  Eric Scharff
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *)

MODULE Strings;

IMPORT Out;

PROCEDURE NumToWord(i: INTEGER);
BEGIN
  IF i >= 1000000000 THEN
    NumToWord(i / 1000000000);
    Out.Str(" billion");
    i := i MOD 1000000000;
  END;
  IF i >= 1000000 THEN
    NumToWord(i / 1000000);
    Out.Str(" million");
    i := i MOD 1000000;
  END;
  IF i >= 1000 THEN
    NumToWord(i / 1000);
    Out.Str(" thousand");
    i := i MOD 1000;
  END;
  IF i >= 100 THEN
    NumToWord(i / 100);
    Out.Str(" hundred");
    i := i MOD 100;
  END;
  IF i >= 90 THEN
    Out.Str(" ninety");
    i := i - 90;
  END;
  IF i >= 80 THEN
    Out.Str(" eighty");
    i := i - 80;
  END;
  IF i >= 70 THEN
    Out.Str(" seventy");
    i := i - 70;
  END;
  IF i >= 60 THEN
    Out.Str(" sixty");
    i := i - 60;
  END;
  IF i >= 50 THEN
    Out.Str(" fifty");
    i := i - 50;
  END;
  IF i >= 40 THEN
    Out.Str(" fourty");
    i := i - 40;
  END;
  IF i >= 30 THEN
    Out.Str(" thirty");
    i := i - 30;
  END;
  IF i >= 20 THEN
    Out.Str(" twenty");
    i := i - 20;
  END;
  CASE i OF
    1 : Out.Str(" one")
  | 2 : Out.Str(" two")
  | 3 : Out.Str(" three")
  | 4 : Out.Str(" four")
  | 5 : Out.Str(" five")
  | 6 : Out.Str(" six")
  | 7 : Out.Str(" seven")
  | 8 : Out.Str(" eight")
  | 9 : Out.Str(" nine")
  | 10 : Out.Str(" ten")
  | 11 : Out.Str(" eleven")
  | 12 : Out.Str(" twelve")
  | 13 : Out.Str(" thirteen")
  | 14 : Out.Str(" fourteen")
  | 15 : Out.Str(" fifteen")
  | 16 : Out.Str(" sixteen")
  | 17 : Out.Str(" seventeen")
  | 18 : Out.Str(" eighteen")
  | 19 : Out.Str(" nineteen")
  END;
END NumToWord;

PROCEDURE ToWord(i: INTEGER);
BEGIN
  Out.Int(i); NumToWord(i); Out.Ln
END ToWord;

PROCEDURE ToLower(VAR c: ARRAY OF CHAR);
VAR i: INTEGER;
BEGIN
  i := 0;
  WHILE i < LEN(c) DO
    IF (c[i] >= "A") & (c[i] <= "Z") THEN
      c[i] := CHR(ORD(c[i]) + 32)
    END;
    i := i + 1
  END
END ToLower;

PROCEDURE Middle(s: INTEGER; VAR c: ARRAY OF CHAR; s2: INTEGER);
BEGIN
  IF (s = 81) & (s2 = 82) THEN
    ToLower(c)
  END
END Middle;

PROCEDURE WriteString(s: ARRAY OF CHAR);
VAR i: INTEGER;
BEGIN
  i := 0;
  WHILE s[i] # 0X DO
    Out.Char(s[i]);
    i := i + 1
  END;
  Out.Ln
END WriteString;

PROCEDURE Compare(a, b: ARRAY OF CHAR);
PROCEDURE Tab; BEGIN Out.Char(9X) END Tab;
BEGIN
  Out.Str("a=[");
  Out.Str(a);
  Out.Str("]"); Tab; IF LEN(a) < 3 THEN Tab END; Out.Str("b=[");
  Out.Str(b);
  Out.Str("]");
  Tab; IF LEN(b) < 3 THEN Tab END;
  IF a < b  THEN Out.Str("<  ") ELSE Out.Str("   ") END;
  IF a <= b THEN Out.Str("<= ") ELSE Out.Str("   ") END;
  IF a = b  THEN Out.Str("=  ") ELSE Out.Str("   ") END;
  IF a # b  THEN Out.Str("#  ") ELSE Out.Str("   ") END;
  IF a >= b THEN Out.Str(">= ") ELSE Out.Str("   ") END;
  IF a > b  THEN Out.Str(">  ") ELSE Out.Str("   ") END;
  Out.Ln
END Compare;

PROCEDURE Comparisons;
BEGIN
  Compare("ABCDEF", "ABCDEF");
  Compare("bBCDEF", "aBCDEF");
  Compare("aBCDEF", "bBCDEF");
  Compare("AbCDEF", "AaCDEF");
  Compare("AaCDEF", "AbCDEF");
  Compare("ABCDEb", "ABCDEa");
  Compare("ABCDEa", "ABCDEb");
  Compare("ABCDE", "ABCD");
  Compare("ABCD", "ABCDE");
  Compare("", "ABCDEF");
  Compare("ABCDEF", "");
  Compare("游린游릴游릱", "游린游릱游릴");
END Comparisons;

PROCEDURE Test;
VAR
  ca: ARRAY 10 OF CHAR;
BEGIN
  WriteString("Hello, world!");
  ca[0] := 41X;
  ca[1] := 42X;
  ca[2] := 63X;
  ca[3] := 44X;
  ca[4] := 45X;
  ca[5] := 0X;
  WriteString(ca);
  Middle(81, ca, 82);
  WriteString(ca);
  ToWord(4);
  ToWord(14);
  ToWord(214);
  ToWord(3214);
  ToWord(43214);
  ToWord(543214);
  ToWord(6543214);
  ToWord(76543214);
  ToWord(1000800004);
END Test;

BEGIN
  Comparisons;
  Test
END Strings.
