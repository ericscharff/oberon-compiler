(*
 * This file is part of oberon-compiler
 *
 * Copyright (C) 2018-2025  Eric Scharff
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *)

MODULE CairoTest;

IMPORT Cairo, Math;

CONST
  CANVAS_WIDTH = 640.0;
  CANVAS_HEIGHT = 480.0;
  Y_STEPS = CANVAS_HEIGHT / 15.0;
  X_PIXELS_PER_STEP = CANVAS_WIDTH / Y_STEPS;
  Y_PIXELS_PER_STEP = CANVAS_HEIGHT / Y_STEPS;

TYPE
  Runner = PROCEDURE;

VAR
  c: Cairo.Context;
  i: REAL;
  turtleX, turtleY: REAL;
  turtleHeading: INTEGER;

PROCEDURE LineArt;
BEGIN
  i := 0.0;
  WHILE i <= Y_STEPS DO
    Cairo.MoveTo(c, 0.0, i * Y_PIXELS_PER_STEP);
    Cairo.LineTo(c, (Y_STEPS - i) * X_PIXELS_PER_STEP, 0.0);
    Cairo.MoveTo(c, CANVAS_WIDTH, i * Y_PIXELS_PER_STEP);
    Cairo.LineTo(c, i * X_PIXELS_PER_STEP, 0.0);
    Cairo.MoveTo(c, 0.0, i * Y_PIXELS_PER_STEP);
    Cairo.LineTo(c, i * X_PIXELS_PER_STEP, CANVAS_HEIGHT);
    Cairo.MoveTo(c, CANVAS_WIDTH, i * Y_PIXELS_PER_STEP);
    Cairo.LineTo(c, (Y_STEPS - i) * X_PIXELS_PER_STEP, CANVAS_HEIGHT);
    i := i + 1.0
  END;
END LineArt;

PROCEDURE Circle;
VAR
  i: INTEGER;

BEGIN
  Cairo.MoveTo(c, CANVAS_WIDTH - 20.0, CANVAS_HEIGHT / 2.0);
  FOR i := 0 TO 360 DO
    Cairo.LineTo(c, (CANVAS_WIDTH - 20.0) / 2.0 * Math.Cosine(i) + CANVAS_WIDTH / 2.0, (CANVAS_HEIGHT - 20.0) / 2.0 * Math.Sine(i) + CANVAS_HEIGHT / 2.0)
  END;
END Circle;

PROCEDURE Forward(size: REAL);
BEGIN
  turtleX := turtleX + (size * Math.Cosine(turtleHeading));
  turtleY := turtleY + (size * Math.Sine(turtleHeading));
  Cairo.LineTo(c, turtleX, turtleY)
END Forward;

PROCEDURE Right(angle: INTEGER);
BEGIN
  turtleHeading := turtleHeading + angle;
END Right;

PROCEDURE Square;
VAR
  i: INTEGER;

BEGIN
  FOR i := 1 TO 4 DO
    Forward(80.0);
    Right(90)
  END
END Square;

PROCEDURE Flower;
VAR
  i: INTEGER;

BEGIN
  FOR i := 1 TO 20 DO
    Square;
    Right(18)
  END
END Flower;

PROCEDURE TurtleGeometry;
BEGIN
  Cairo.MoveTo(c, CANVAS_WIDTH / 2.0, CANVAS_HEIGHT / 2.0);
  turtleHeading := 90;
  turtleX := CANVAS_WIDTH / 2.0;
  turtleY := CANVAS_HEIGHT / 2.0;
  Flower;
END TurtleGeometry;

PROCEDURE TimesTable;
CONST
  times = 120;

VAR
  i: INTEGER;

PROCEDURE XCoord(num: INTEGER): REAL;
BEGIN
  num := num MOD 180;

  RETURN CANVAS_WIDTH / 2.0 + Math.Cosine(num * 2) * CANVAS_HEIGHT / 2.0
END XCoord;

PROCEDURE YCoord(num: INTEGER): REAL;
BEGIN
  num := num MOD 180;

  RETURN CANVAS_HEIGHT / 2.0 + Math.Sine(num * 2) * CANVAS_HEIGHT / 2.0
END YCoord;

BEGIN
  FOR i := 0 TO 179 DO
    Cairo.MoveTo(c, XCoord(i), YCoord(i));
    Cairo.LineTo(c, XCoord(i * times), YCoord(i * times));
  END;
END TimesTable;

PROCEDURE RunExample(runner: Runner; outputFile: ARRAY OF CHAR);
BEGIN
  Cairo.InitContext(c, FLOOR(CANVAS_WIDTH), FLOOR(CANVAS_HEIGHT));
  runner;
  Cairo.Stroke(c);
  Cairo.WriteToPNG(c, outputFile);
  Cairo.DestroyContext(c);
END RunExample;

BEGIN
  RunExample(LineArt, "line_art.png");
  RunExample(Circle, "circle.png");
  RunExample(TurtleGeometry, "turtle_flower.png");
  RunExample(TimesTable, "times_table.png");
END CairoTest.
