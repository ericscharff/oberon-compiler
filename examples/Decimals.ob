module Decimals;

import Out;

const
  Digits = 10;

type
  Decimal = array Digits + 1 of char;

procedure Zero(a: Decimal): boolean;
var i: integer; r: boolean;
begin
  r := true;
  for i := 0 to Digits-1 do
    r := r & (a[i] = "0")
  end
  return r
end Zero;

procedure AddDecimals(a, b: Decimal; var result :Decimal);
var i, c: integer;
begin
  c := 0;
  for i := Digits-1 to 0 by -1 do
    result[i] := CHR(c + ORD(a[i]) + ORD(b[i]) - 48);
    if ORD(result[i]) > ORD("9") then
      c := 1;
      result[i] := CHR(ORD(result[i]) - 10)
    else
      c := 0
    end;
  end
end AddDecimals;

procedure HalfDecimal(a: Decimal; var result: Decimal; var remainder: integer);
var i, t: integer;
begin
  remainder := 0;
  for i := 0 to Digits-1 do
    t := 10 * remainder + ORD(a[i]) - 48;
    result[i] := CHR(t div 2 + 48);
    remainder := t mod 2;
  end
end HalfDecimal;

procedure ToReal(var a: Decimal);
var
  i: integer;
begin
  for i := 1 to 24 do
    AddDecimals(a, a, a);
    Out.Char(a[0]);
    a[0] := "0";
  end;
  Out.Ln;
end ToReal;

procedure ToBinary(var a: Decimal);
var r: integer;
begin
  while ~Zero(a) do
    HalfDecimal(a, a, r);
    Out.Int(r)
  end;
  Out.Ln
end ToBinary;

procedure Test;
var a, b, c: Decimal; r: integer;
begin
  Out.Int(Out.RealAsInt(0.48)); Out.Ln;
  a := "0314159000";
  a := "0910000000";
  ToReal(a);
  a := "0750010088";
  b := "0000090088";
  c[10] := 0X;
  AddDecimals(a, b, c);
  Out.Str(c);
  Out.Ln;
  HalfDecimal(a, c, r);
  Out.Str(c);
  Out.Ln;
  ToBinary(c)
end Test;
  
begin
  Test
end Decimals.
