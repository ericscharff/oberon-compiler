MODULE CCodegen;

IMPORT AST, Lex, Out;

VAR
  indent          :INTEGER;
  addBoundsChecks :BOOLEAN;
  genCPlusPlus    :BOOLEAN;

PROCEDURE GenStr(s :ARRAY OF CHAR);
BEGIN
  Out.Str(s);
END GenStr;

PROCEDURE GenInt(i :INTEGER);
BEGIN
  Out.Int(i);
END GenInt;

PROCEDURE GenReal(r :REAL);
BEGIN
  Out.Real(r);
END GenReal;

PROCEDURE GenLn;
BEGIN
  Out.Ln
END GenLn;

PROCEDURE GenI;
VAR
  i :INTEGER;
BEGIN
  FOR i := 1 TO indent DO GenStr("  ") END
END GenI;

PROCEDURE GenTypeinfos*;
VAR
  i :INTEGER;
BEGIN
  GenStr("typedef int oberon_typeid;"); GenLn;
  GenStr("oberon_typeid oberon_typeinfos[] = {");
  FOR i := 0 TO AST.nextTypeId DO
    GenInt(AST.recordToParent[i]);
    GenStr(", ");
  END;
  GenStr("};"); GenLn;
  GenStr("#include "); GenStr(22X); GenStr("runtime.c"); GenStr(22X); GenLn;
END GenTypeinfos;

PROCEDURE GenQName(l :Lex.Lexer; name :AST.QName);
BEGIN
  IF name.moduleName > 0 THEN
    Lex.OutStr(l, name.moduleName);
    GenStr("_");
  END;
  IF name.name > 0 THEN
    Lex.OutStr(l, name.name);
  END;
END GenQName;

PROCEDURE GenType(l :Lex.Lexer; t :AST.Type; name :AST.QName; skipDecl, procDecl :BOOLEAN);
VAR
  f, pf :AST.Decl;
  q     :AST.QName;
  p     :AST.Type;
BEGIN
  q.moduleName := 0;
  q.name := 0;
  IF (t.decl = NIL) OR skipDecl THEN
    CASE t.kind OF
      AST.typeInteger:
        GenStr("int ");
        GenQName(l, name);
    | AST.typeReal:
        GenStr("float ");
        GenQName(l, name);
    | AST.typeBoolean:
        GenStr("bool ");
        GenQName(l, name);
    | AST.typeChar:
        GenStr("char ");
        GenQName(l, name);
    | AST.typeSet:
        GenStr("int ");
        GenQName(l, name);
    | AST.typePointer:
        IF t.base.decl = NIL THEN
          GenType(l, t.base, q, FALSE, FALSE);
        ELSE
          GenStr("struct ");
          GenQName(l, t.base.decl.qname);
        END;
        GenStr(" *");
        GenQName(l, name);
    | AST.typeArray:
        p := t;
        WHILE p.kind = AST.typeArray DO
          p := p.base;
        END;
        GenType(l, p, name, FALSE, FALSE);
        p := t;
        WHILE (p.kind = AST.typeArray) DO
          GenStr("[");
          GenInt(p.length);
          GenStr("]");
          p := p.base;
        END;
    | AST.typeRecord:
        IF genCPlusPlus THEN
          GenStr("struct ");
          GenQName(l, name);
          IF t.base # NIL THEN
            ASSERT(t.base.decl # NIL);
            GenStr(": public ");
            GenQName(l, t.base.decl.qname);
          END;
          GenStr(" {");
          GenLn;
          INC(indent);
          IF AST.NeedsTypeInfo(t) THEN
            (* constructor sets typeid *)
            GenI; GenQName(l, name); GenStr("() { _tid = "); GenInt(t.typeId); GenStr("; }"); GenLn;
            (* virtual destructor to get RTTI *)
            IF t.base = NIL THEN
              GenI; GenStr("oberon_typeid _tid;"); GenLn;
              GenI; GenStr("virtual ~"); GenQName(l, name); GenStr("() = default;"); GenLn;
            END;
          END;
          f := t.fields;
          (* Drop fields common to parent *)
          IF t.base = NIL THEN
            pf := NIL;
          ELSE
            pf := t.base.decl.typ.fields;
          END;
          WHILE (f # NIL) & (f.kind # AST.declEND) &
                (pf # NIL) & (pf.kind # AST.declEND) &
                (f.qname.name = pf.qname.name) DO
            f := f.next;
            pf := pf.next;
          END;
          WHILE (f # NIL) & (f.kind # AST.declEND) DO
            (* Drop package from field name *)
            q.name := f.qname.name;
            GenI;
            GenType(l, f.typ, q, FALSE, FALSE);
            GenStr(";");
            GenLn;
            f := f.next;
          END;
          DEC(indent);
          GenI; GenStr("} "); GenQName(l, name);
        ELSE
          GenStr("struct ");
          GenQName(l, name);
          GenStr(" {");
          GenLn;
          INC(indent);
          IF AST.NeedsTypeInfo(t) THEN
            Lex.ErrorLn(l, "C++ required when using IS or typeguard");
          END;
          f := t.fields;
          WHILE (f # NIL) & (f.kind # AST.declEND) DO
            (* Drop package from field name *)
            q.name := f.qname.name;
            GenI;
            GenType(l, f.typ, q, FALSE, FALSE);
            GenStr(";");
            GenLn;
            f := f.next;
          END;
          DEC(indent);
          GenI; GenStr("} "); GenQName(l, name);
        END;
    | AST.typeProcedure:
        IF t.base.kind = AST.typeNil THEN
          GenStr("void ")
        ELSE
          GenType(l, t.base, q, FALSE, FALSE);
        END;
        IF procDecl THEN
          GenQName(l, name);
        ELSE
          GenStr(" (*");
          GenQName(l, name);
          GenStr(")");
        END;
        GenStr("(");
        IF (t.fields = NIL) THEN
          IF ~genCPlusPlus THEN GenStr("void") END;
        ELSE
          f := t.fields;
          WHILE f.kind # AST.declEND DO
            t := f.typ;
            IF procDecl THEN
              q.name := f.qname.name;
            END;
            IF (t.kind IN {AST.typeRecord, AST.typeArray}) & (f.kind # AST.declVarParam) THEN
              GenStr("const ");
            END;
            IF (t.kind = AST.typeRecord) OR ((f.kind = AST.declVarParam) & ~(t.kind = AST.typeArray)) THEN
              q.name := 0;
              GenType(l, t, q, FALSE, FALSE);
              GenStr(" *");
              IF procDecl THEN
                q.name := f.qname.name;
                GenQName(l, q);
              END;
            ELSIF (t.kind = AST.typeRecord) OR AST.IsOpenArray(t) THEN
              q.name := 0;
              GenType(l, t.base, q, FALSE, FALSE);
              GenStr(" *");
              IF procDecl THEN
                q.name := f.qname.name;
                GenQName(l, q);
              END;
            ELSE
              GenType(l, t, q, FALSE, FALSE);
            END;
            IF AST.IsOpenArray(t) THEN
              GenStr(", size_t");
              IF procDecl THEN
                GenStr(" ");
                GenQName(l, q);
                GenStr("__len");
              END;
            END;
            IF f.next.kind # AST.declEND THEN
              GenStr(", ");
            END;
            f := f.next;
          END;
        END;
        GenStr(")");
    END;
  ELSE
    GenQName(l, t.decl.qname);
    GenStr(" ");
    GenQName(l, name);
  END;
END GenType;

PROCEDURE GenChar(i :INTEGER);
VAR
  c2 :ARRAY 2 OF CHAR;
BEGIN
  (* apostrophe, backslash, or non-printable *)
  IF (i = 39) OR (i = 92) OR (i < 32) OR (i > 126) THEN
    GenInt(i);
  ELSE
    c2[1] := 0X;
    c2[0] := CHR(i);
    GenStr("'");
    GenStr(c2);
    GenStr("'");
  END;
END GenChar;

PROCEDURE GenVal(l :Lex.Lexer; e :AST.Expr);
BEGIN
  ASSERT(e.typ # NIL);
  IF e.typ.kind = AST.typeNil THEN
    GenStr("0 /*NULL*/");
  ELSIF e.typ.kind IN {AST.typeInteger, AST.typeBoolean} THEN
    GenInt(e.iVal);
  ELSIF e.typ.kind = AST.typeChar THEN
    GenChar(e.iVal);
  ELSIF e.typ.kind = AST.typeSet THEN
    GenInt(ORD(e.setVal));
  ELSIF e.typ.kind = AST.typeReal THEN
    GenReal(e.rVal);
  ELSIF e.typ.kind = AST.typeString THEN
    Lex.OutStrEscaped(l, e.iVal);
  ELSE
    ASSERT(FALSE);
  END;
END GenVal;

PROCEDURE GenLengthof(l :Lex.Lexer; e :AST.Expr);
VAR
  q :AST.QName;
BEGIN
  q.moduleName := 0;
  IF e.typ.kind = AST.typeString THEN
    GenInt(Lex.StringLenI(l, e.iVal) + 1);
  ELSIF e.typ.length > 0 THEN
    GenInt(e.typ.length);
  ELSE
    ASSERT(e.kind = AST.exprIdentRef);
    q.name := e.decl.qname.name;
    GenQName(l, q);
    GenStr("__len");
  END;
END GenLengthof;

PROCEDURE GenExpr(l :Lex.Lexer; e :AST.Expr);
VAR
  q      :AST.QName;
  formal :AST.Decl;
BEGIN
  ASSERT(e # NIL);
  ASSERT(e.kind >= AST.exprVal);
  ASSERT(e.kind <= AST.exprAssign);
  CASE e.kind OF
    AST.exprVal:
      GenVal(l, e);
  | AST.exprUnary:
      IF e.lhs.typ.kind = AST.typeSet THEN
        (* Set ops *)
        IF e.op = Lex.tMINUS THEN
          GenStr("~"); GenExpr(l, e.lhs);
        ELSE
          ASSERT(FALSE);
        END;
      ELSE
        (* Base types *)
        CASE e.op OF
          Lex.tMINUS: GenStr("-("); GenExpr(l, e.lhs); GenStr(")");
        | Lex.tPLUS: GenExpr(l, e.lhs);
        | Lex.tTILDE: GenStr("!("); GenExpr(l, e.lhs); GenStr(")");
        | Lex.tAsSetElt: GenStr("(1 << "); GenExpr(l, e.lhs); GenStr(")");
        END;
      END;
  | AST.exprBinary:
      GenStr("(");
      IF e.lhs.typ.kind IN {AST.typeArray, AST.typeString} THEN
        (* String ops *)
        GenStr("strcmp(");
        GenExpr(l, e.lhs);
        GenStr(", ");
        GenExpr(l, e.rhs);
        GenStr(")");
        CASE e.op OF
          Lex.tLT: GenStr(" < 0");
        | Lex.tGT: GenStr(" > 0");
        | Lex.tLTEQ: GenStr(" <= 0");
        | Lex.tGTEQ: GenStr(" >= 0");
        | Lex.tEQ: GenStr(" == 0");
        | Lex.tPOUND: GenStr(" != 0");
        | Lex.tPLUS, Lex.tMINUS, Lex.tSTAR, Lex.tSLASH, Lex.tDIV, Lex.tMOD,
          Lex.tXOR, Lex.tAMP, Lex.tOR, Lex.tIN, Lex.tIS, Lex.tDOTDOT:
        END;
      ELSIF e.lhs.typ.kind = AST.typeSet THEN
        (* Set ops *)
        CASE e.op OF
          Lex.tPLUS:
            GenExpr(l, e.lhs); GenStr(" | "); GenExpr(l, e.rhs);
        | Lex.tMINUS:
            GenExpr(l, e.lhs); GenStr(" & ~"); GenExpr(l, e.rhs);
        | Lex.tSTAR:
            GenExpr(l, e.lhs); GenStr(" & "); GenExpr(l, e.rhs);
        | Lex.tSLASH, Lex.tDIV:
            GenExpr(l, e.lhs); GenStr(" ^ "); GenExpr(l, e.rhs);
        | Lex.tEQ:
            GenExpr(l, e.lhs); GenStr(" == "); GenExpr(l, e.rhs);
        | Lex.tPOUND:
            GenExpr(l, e.lhs); GenStr(" != "); GenExpr(l, e.rhs);
        | Lex.tMOD, Lex.tXOR, Lex.tAMP, Lex.tOR, Lex.tLT, Lex.tGT, Lex.tLTEQ,
          Lex.tGTEQ, Lex.tIN, Lex.tIS, Lex.tDOTDOT:
            ASSERT(FALSE);
        END;
      ELSE
        (* Primitive type (CHAR, INTEGER, REAL, POINTER ops.                    *)
        (* Of course, some of these don't make sense (e.g., pointer + poitner)  *)
        (* but this code relies on the fact that the AST has done type checking *)
        (* and validation beforehand.                                           *)
        CASE e.op OF
          Lex.tPLUS:
            GenExpr(l, e.lhs); GenStr(" + "); GenExpr(l, e.rhs);
        | Lex.tMINUS:
            GenExpr(l, e.lhs); GenStr(" - "); GenExpr(l, e.rhs);
        | Lex.tSTAR:
            GenExpr(l, e.lhs); GenStr(" * "); GenExpr(l, e.rhs);
        | Lex.tSLASH, Lex.tDIV:
            GenExpr(l, e.lhs); GenStr(" / "); GenExpr(l, e.rhs);
        | Lex.tMOD:
            GenExpr(l, e.lhs); GenStr(" % "); GenExpr(l, e.rhs);
        | Lex.tXOR:
            GenExpr(l, e.lhs); GenStr(" ^ "); GenExpr(l, e.rhs);
        | Lex.tAMP:
            GenExpr(l, e.lhs); GenStr(" && "); GenExpr(l, e.rhs);
        | Lex.tOR:
            GenExpr(l, e.lhs); GenStr(" || "); GenExpr(l, e.rhs);
        | Lex.tLT:
            GenExpr(l, e.lhs); GenStr(" < "); GenExpr(l, e.rhs);
        | Lex.tGT:
            GenExpr(l, e.lhs); GenStr(" > "); GenExpr(l, e.rhs);
        | Lex.tLTEQ:
            GenExpr(l, e.lhs); GenStr(" <= "); GenExpr(l, e.rhs);
        | Lex.tGTEQ:
            GenExpr(l, e.lhs); GenStr(" >= "); GenExpr(l, e.rhs);
        | Lex.tEQ:
            GenExpr(l, e.lhs); GenStr(" == "); GenExpr(l, e.rhs);
        | Lex.tPOUND:
            GenExpr(l, e.lhs); GenStr(" != "); GenExpr(l, e.rhs);
        | Lex.tIN:
            GenStr("(1 << ");
            GenExpr(l, e.lhs);
            GenStr(") & ");
            GenExpr(l, e.rhs);
        | Lex.tIS:
            GenStr("does_type_extend(");
            IF e.lhs.typ.kind = AST.typePointer THEN
              ASSERT(e.rhs.typ.kind = AST.typePointer);
              GenExpr(l, e.lhs);
              GenStr("->_tid, ");
              GenInt(e.rhs.typ.base.typeId);
            ELSE
              ASSERT(e.lhs.typ.kind = AST.typeRecord);
              ASSERT(e.rhs.typ.kind = AST.typeRecord);
              GenExpr(l, e.lhs);
              GenStr("._tid, ");
              GenInt(e.rhs.typ.typeId);
            END;
            GenStr(")");
        | Lex.tDOTDOT:
            GenStr("make_set_range(");
            GenExpr(l, e.lhs); GenStr(", "); GenExpr(l, e.rhs);
            GenStr(")");
        END;
      END;
      GenStr(")");
  | AST.exprIdentRef:
      IF (e.decl.kind IN {AST.declVar, AST.declProcedure}) & (e.decl.nesting = 0) THEN
        q.moduleName := e.decl.qname.moduleName;
      ELSE
        (* Local variables don't get a prefix, just for readability *)
        q.moduleName := 0;
      END;
      q.name := e.decl.qname.name;
      IF ((e.decl.kind = AST.declVarParam) & ~(e.typ.kind = AST.typeArray)) OR
         ((e.decl.kind = AST.declParam) & (e.typ.kind = AST.typeRecord)) THEN
        GenStr("(*");
        GenQName(l, q);
        GenStr(")");
      ELSE
        GenQName(l, q);
      END;
  | AST.exprProcCall:
      GenExpr(l, e.lhs);
      GenStr("(");
      formal := e.lhs.typ.fields;
      e := e.rhs;
      WHILE e # NIL DO
        IF e.typ.kind = AST.typeArray THEN
          (* Arrays are always passed by pointer, no special procesing  *)
          GenExpr(l, e);
        ELSIF (e.typ.kind = AST.typeRecord) OR (formal.kind = AST.declVarParam) THEN
          (* Record (and VAR parameters) are always passed by reference *)
          GenStr("&(");
          GenExpr(l, e);
          GenStr(")");
        ELSE
          (* Everything else is passed by value.                        *)
          GenExpr(l, e);
        END;
        IF AST.IsOpenArray(formal.typ) THEN
          GenStr(", ");
          GenLengthof(l, e);
        END;
        IF e.next # NIL THEN
          GenStr(", ");
        END;
        e := e.next;
        formal := formal.next;
      END;
      GenStr(")");
  | AST.exprFieldRef:
      GenExpr(l, e.lhs);
      GenStr(".");
      Lex.OutStr(l, e.iVal);
  | AST.exprPointerDeref:
      GenStr("(*");
      GenExpr(l, e.lhs);
      GenStr(")");
  | AST.exprArrayRef:
      GenExpr(l, e.lhs);
      GenStr("[");
      IF addBoundsChecks THEN
        GenStr("checkbounds(");
        GenExpr(l, e.rhs);
        GenStr(", ");
        GenLengthof(l, e.lhs);
      ELSE
        GenExpr(l, e.rhs);
      END;
      GenStr("]");
  | AST.exprTypeGuard:
      IF e.lhs.typ.kind = AST.typePointer THEN
        GenStr("dynamic_cast<");
        GenQName(l, e.decl.qname);
        GenStr(">(");
        GenExpr(l, e.lhs);
        GenStr(")");
      ELSE
        ASSERT(e.lhs.typ.kind = AST.typeRecord);
        ASSERT(e.lhs.kind = AST.exprIdentRef);
        ASSERT(e.lhs.decl.kind = AST.declVarParam);
        GenStr("(*dynamic_cast<");
        GenQName(l, e.decl.qname);
        GenStr("*>(");
        q.moduleName := 0;
        q.name := e.lhs.decl.qname.name;
        GenQName(l, q);
        GenStr("))");
      END;
  | AST.exprBuiltin:
      ASSERT(e.iVal >= AST.builtinAbs);
      ASSERT(e.iVal <= AST.builtinOrd);
      CASE e.iVal OF
        AST.builtinAbs: GenStr("oberon_abs("); GenExpr(l, e.rhs); GenStr(")");
      | AST.builtinAssert: GenStr("assert("); GenExpr(l, e.rhs); GenStr(")");
      | AST.builtinChr, AST.builtinOrd, AST.builtinFlt: GenExpr(l, e.rhs);
      | AST.builtinDec:
          GenExpr(l, e.rhs);
          IF e.rhs.next = NIL THEN
            GenStr("--");
          ELSE
            GenStr(" -= ");
            GenExpr(l, e.rhs.next);
          END;
      | AST.builtinInc:
          GenExpr(l, e.rhs);
          IF e.rhs.next = NIL THEN
            GenStr("++");
          ELSE
            GenStr(" += ");
            GenExpr(l, e.rhs.next);
          END;
      | AST.builtinNew:
          GenExpr(l, e.rhs);
          IF genCPlusPlus THEN
            GenStr(" = new ");
            GenQName(l, e.rhs.typ.base.decl.qname);
          ELSE
            GenStr(" = malloc(sizeof(");
            GenQName(l, e.rhs.typ.base.decl.qname);
            GenStr("))");
          END;
      END;
  | AST.exprAssign:
      IF e.lhs.typ.kind = AST.typeArray THEN
        ASSERT(e.lhs.typ.base.kind = AST.typeChar);
        GenStr("strncpy(");
        GenExpr(l, e.lhs);
        GenStr(", ");
        GenExpr(l, e.rhs);
        GenStr(", ");
        GenLengthof(l, e.lhs);
        GenStr(")");
      ELSE
        GenExpr(l, e.lhs);
        GenStr(" = ");
        GenExpr(l, e.rhs);
      END;
  END;
END GenExpr;

PROCEDURE GenParenExpr(l :Lex.Lexer; e :AST.Expr);
BEGIN
  IF e.kind = AST.exprBinary THEN
    GenExpr(l, e);
  ELSE
    GenStr("(");
    GenExpr(l, e);
    GenStr(")");
  END;
END GenParenExpr;

PROCEDURE ForForwards(e :AST.Expr) :BOOLEAN;
BEGIN
  RETURN (~AST.IsConst(e.rhs) OR ~AST.IsConst(e.next)) OR
         ((((e.rhs.typ.kind = AST.typeInteger) & (e.next.iVal > e.rhs.iVal)) OR
           ((e.rhs.typ.kind = AST.typeReal) & (e.next.rVal > e.rhs.rVal))))
END ForForwards;

PROCEDURE GenStatements(l :Lex.Lexer; s :AST.Stmt);
VAR
  e              :AST.Expr;
  fromVal, toVal :INTEGER;
  useChar        :BOOLEAN;
BEGIN
  WHILE s # NIL DO
    ASSERT(s.kind >= AST.stmtAssign);
    ASSERT(s.kind <= AST.stmtEmpty);
    GenI;
    CASE s.kind OF
      AST.stmtAssign, AST.stmtProcCall:
        GenExpr(l, s.cond);
        GenStr(";");
    | AST.stmtIf:
        GenStr("if ");
        GenParenExpr(l, s.cond);
        GenStr(" {");
        GenLn;
        INC(indent);
        GenStatements(l, s.body);
        DEC(indent);
        GenStatements(l, s.elsifs);
        GenI;
        GenStr("}");
    | AST.stmtWhile:
        IF s.elsifs = NIL THEN
          GenStr("while ");
          GenParenExpr(l, s.cond);
          GenStr(" {");
          GenLn;
          INC(indent);
          GenStatements(l, s.body);
          DEC(indent);
          GenI;
          GenStr("}");
        ELSE
          GenStr("while (1) {");
          GenLn;
          INC(indent);
          GenI;
          GenStr("if ");
          GenParenExpr(l, s.cond);
          GenStr(" {");
          GenLn;
          INC(indent);
          GenStatements(l, s.body);
          DEC(indent);
          GenStatements(l, s.elsifs);
          GenI;
          GenStr("} else { break; }");
          GenLn;
          DEC(indent);
          GenI;
          GenStr("}");
        END;
    | AST.stmtRepeat:
        GenStr("do {");
        GenLn;
        INC(indent);
        GenStatements(l, s.body);
        DEC(indent);
        GenI;
        GenStr("} while (!");
        GenExpr(l, s.cond);
        GenStr(");");
        GenLn;
    | AST.stmtFor:
        (* Cond is an assign, so cond.lhs is the LCV, and cond.rhs the init *)
        GenStr("for (");
        GenExpr(l, s.cond);
        GenStr("; ");
        GenExpr(l, s.cond.lhs);
        IF ForForwards(s.cond) THEN
          GenStr(" <= ");
        ELSE
          GenStr(" >= ");
        END;
        GenExpr(l, s.cond.next);
        GenStr("; ");
        GenExpr(l, s.cond.lhs);
        IF s.cond.next.next = NIL THEN
          IF ForForwards(s.cond) THEN GenStr("++") ELSE GenStr("--") END;
        ELSE
          GenStr(" += "); GenExpr(l, s.cond.next.next);
        END;
        GenStr(") {");
        GenLn;
        INC(indent);
        GenStatements(l, s.body);
        DEC(indent);
        GenI;
        GenStr("}");
    | AST.stmtCase:
        GenStr("switch ");
        GenParenExpr(l, s.cond);
        GenStr(" {");
        INC(indent);
        GenStatements(l, s.elsifs);
        DEC(indent);
        GenI;
        GenStr("}");
        GenLn;
    | AST.stmtCaseItem:
        (* Case items have a special cond, which has possibly more than one *)
        (* expr. The expr is either an equal (where the lhs is the case,    *)
        (* which can be ignored), or a CaseDotDot operator, which should be *)
        (* expanded here since the cases must be constant.                  *)
        GenLn;
        ASSERT(s.next = NIL);
        ASSERT(s.cond.kind = AST.exprBinary);
        e := s.cond;
        WHILE e # NIL DO
          ASSERT((e.op = Lex.tEQ) OR (e.op = Lex.tCaseDotDot));
          IF e.op = Lex.tEQ THEN
            ASSERT(AST.IsConst(e.rhs));
            useChar := e.rhs.typ.kind = AST.typeChar;
            fromVal := e.rhs.iVal;
            toVal := fromVal;
          ELSE
            ASSERT(AST.IsConst(e.lhs.rhs));
            ASSERT(AST.IsConst(e.rhs.rhs));
            useChar := e.rhs.rhs.typ.kind = AST.typeChar;
            fromVal := e.lhs.rhs.iVal;
            toVal := e.rhs.rhs.iVal;
          END;
          WHILE fromVal <= toVal DO
            GenI; GenStr("case ");
            IF useChar THEN GenChar(fromVal) ELSE GenInt(fromVal) END;
            GenStr(":"); GenLn;
            INC(fromVal);
          END;
          e := e.next;
        END;
        INC(indent);
        GenStatements(l, s.body);
        GenI; GenStr("break;"); GenLn;
        DEC(indent);
        GenStatements(l, s.elsifs);
    | AST.stmtElsIf:
        ASSERT(s.next = NIL);
        GenStr("} else if ");
        GenParenExpr(l, s.cond);
        GenStr(" {");
        GenLn;
        INC(indent);
        GenStatements(l, s.body);
        DEC(indent);
        GenStatements(l, s.elsifs);
    | AST.stmtElse:
        ASSERT(s.elsifs = NIL);
        ASSERT(s.next = NIL);
        GenStr("} else {");
        GenLn;
        INC(indent);
        GenStatements(l, s.body);
        DEC(indent);
    END;
    IF ~(s.kind IN {AST.stmtCase, AST.stmtCaseItem}) THEN GenLn END;
    s := s.next;
  END;
END GenStatements;

PROCEDURE GenTypedef(l :Lex.Lexer; d :AST.Decl);
BEGIN
  IF d.typ.kind # AST.typeNil THEN
    GenI;
    GenStr("typedef ");
    GenType(l, d.typ, d.qname, TRUE, FALSE);
    GenStr(";");
    GenLn;
  END;
END GenTypedef;

PROCEDURE GenVar(l :Lex.Lexer; d :AST.Decl);
BEGIN
  GenType(l, d.typ, d.qname, FALSE, FALSE);
  GenStr(";");
  GenLn;
END GenVar;

PROCEDURE GenProc(l :Lex.Lexer; d :AST.Decl);
VAR
  p :AST.Decl;
  q :AST.QName;
BEGIN
  q.moduleName := 0;
  GenType(l, d.typ, d.qname, FALSE, TRUE);
  GenStr(" {");
  GenLn;
  INC(indent);
  IF d.procVars # NIL THEN
    p := d.procVars;
    WHILE p.kind # AST.declEND DO
      q.name := p.qname.name;
      IF p.kind = AST.declVar THEN
        IF p.state = AST.stateUnresolved THEN
          GenStr("#pragma GCC warning ");
          GenStr(22X);
          GenStr("variable ");
          GenQName(l, q);
          GenStr(" unused in PROCEDURE ");
          GenQName(l, d.qname);
          GenStr(22X);
          GenLn;
        END;
        GenI;
        GenType(l, p.typ, q, FALSE, FALSE);
        GenStr(";");
        GenLn;
      ELSIF AST.IsOpenArray(p.typ) THEN
        (* Generate code to avoid unused variable warnings *)
        GenI;
        GenStr("(void)");
        GenQName(l, q);
        GenStr("__len;");
        GenLn;
      END;
      p := p.next;
    END;
  END;
  GenStatements(l, d.body);
  IF d.expr # NIL THEN
    GenI;
    GenStr("return (");
    GenExpr(l, d.expr);
    GenStr(");");
    GenLn;
  END;
  DEC(indent);
  GenI;
  GenStr("}");
  GenLn;
END GenProc;

PROCEDURE Generate*(l :Lex.Lexer; d :AST.Decl);
BEGIN
  IF d.nesting = 0 THEN
    CASE d.kind OF
      AST.declType: GenTypedef(l, d);
    | AST.declVar: GenVar(l, d);
    | AST.declProcedure: GenProc(l, d);
    END;
  END;
END Generate;

PROCEDURE GenStartMain*;
BEGIN
  GenStr("int main(int argc, const char **argv) {");
  GenLn;
  INC(indent);
  GenI; GenStr("InitArgs(argc, argv);"); GenLn;
END GenStartMain;

PROCEDURE GenCall*(l :Lex.Lexer; name :AST.QName);
BEGIN
  GenI;
  GenQName(l, name);
  GenStr("();");
  GenLn;
END GenCall;

PROCEDURE GenEndMain*;
BEGIN
  DEC(indent);
  GenI;
  GenStr("}");
  GenLn;
END GenEndMain;

BEGIN
  addBoundsChecks := FALSE;
  genCPlusPlus := FALSE;
  indent := 0
END CCodegen.
